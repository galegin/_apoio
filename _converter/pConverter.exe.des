unit cFISSVCO015;

interface

(*
FIS_NF / FIS_NFC / FIS_NFCCEXML / FIS_NFCCORR / FIS_NFE / FIS_NFECF / FIS_NFEINUT /
FIS_NFES / FIS_NFEXML / FIS_NFEXP / FIS_NFIMP / FIS_NFIMPOSTO / FIS_NFISELOENT /
FIS_NFITEM / FIS_NFITEMAD / FIS_NFITEMCONSIG / FIS_NFITEMDESP / FIS_NFITEMDEVT /
FIS_NFITEMDEVV / FIS_NFITEMDI / FIS_NFITEMIMPOST / FIS_NFITEMLOTE / FIS_NFITEMPLOTE /
FIS_NFITEMPPRDFIN / FIS_NFITEMPROC / FIS_NFITEMPROD / FIS_NFITEMSERIAL / FIS_NFITEMUN /
FIS_NFITEMVL / FIS_NFNSU / FIS_NFREF / FIS_NFREMDES / FIS_NFSELOENT / FIS_NFSELOFIS /
FIS_NFTRANSP / FIS_NFVENCAD / FIS_NFVENCTO
*)

uses
  Classes, SysUtils, DBClient, DB,
  cServiceUnf, cDatasetUnf;

type
  T_FISSVCO015 = class(TcServiceUnf)
  private
    tGER_OPERACAO,
    tPES_PESSOA,
    tPES_PESFISICA,
    tPES_PESJURIDICA,
    tPES_PESSOACLAS,
    tPES_PFADIC,
    tPES_CLIENTE,
    tPRD_PRODUTO,
    tCDF_MPTER,
    tFIS_IMPOSTO,
    tFIS_REGRAFISCAL,
    tFIS_REGRASRV,
    tFIS_REGRAIMPOSTO,
    tFIS_TIPI,
    tFIS_CST,
    tFIS_INFOFISCAL,
    tPRD_PRDREGRAFISCAL,
    tFIS_DECRETOCAPA,
    tFIS_DECRETO,
    tFIS_ALIQUOTAICMSUF,
    tTMP_NR09 : TcDatasetUnf;
    function setEntidade(pParams : String = '') : String; override;
    function getParam(pParams : String = '') : String; override;
    function calculaCOFINS(pParams : String = '') : String;
    function calculaICMS(pParams : String = '') : String;
    function calculaICMSSubst(pParams : String = '') : String;
    function calculaIPI(pParams : String = '') : String;
    function calculaISS(pParams : String = '') : String;
    function calculaPASEP(pParams : String = '') : String;
    function calculaPIS(pParams : String = '') : String;
  public
  published
    function buscaCFOP(pParams : String = '') : String;
    function buscaCST(pParams : String = '') : String;
    function calculaImpostoCapa(pParams : String = '') : String;
    function calculaImpostoItem(pParams : String = '') : String;
  end;

implementation

uses
  cActivate, cFuncao, cXml, cStatus, dModulo;

var
  gCdEmpresaValorEmp,
  gCdEmpresaValorSis,
  gNaturezaComercialEmp,
  gCdAtividadeVarejista,
  gPrAliqICMSManaus,
  gPrAplicMvaSubTrib,
  gCdServico,
  gTpModDctoFiscal,
  gTpOrigemEmissao,
  gCdDecreto,
  gCdDecretoItemCapa,
  gPrIPI,
  gTpAreaComercioOrigem,
  gTpAreaComercioDestino,
  gVlFrete,
  gVlSeguro,
  gVlDespAcessor,
  gTpRegimeOrigem,
  gVlTotalLiquido,
  gVlTotalLiquidoICMS,
  gVlTotalBruto,
  gVlIPI,
  gVlICMS : Real;

  gCdCST,
  gDsUFOrigem,
  gDsUFDestino,
  gCdClasRegEspecialSC,
  gDsLstModDctoFiscalAT,
  gDsLstCfopIpiBcPisCof : String;

  gInImpostoOffLine,
  gInPDVOtimizado,
  gInAtivaDecreto52104,
  gInSomaFreteBaseICMS,
  gInCalcIpiOutEntSai,
  gInCalculaIcmsEntSimples,
  gInArredondaTruncaIcms,
  gInDescontaPisCofinsAlc,
  gInDescontaPisCofinsZfm,
  gInRedBaseIcms,
  gInProdPropria,
  gInVarejista,
  gInPjIsento,
  gInOptSimples,
  gInContribuinte,
  gInProdPropriaDec1643 : Boolean;

//--------------------------------------------------------
function T_FISSVCO015.setEntidade(pParams : String) : String;
//--------------------------------------------------------
begin
  tGER_OPERACAO :=  'GER_OPERACAO'.Create(nil);
  tPES_PESSOA :=  'PES_PESSOA'.Create(nil);
  tPES_PESFISICA :=  'PES_PESFISICA'.Create(nil);
  tPES_PESJURIDICA :=  'PES_PESJURIDICA'.Create(nil);
  tPES_PESSOACLAS :=  'PES_PESSOACLAS'.Create(nil);
  tPES_PFADIC :=  'PES_PFADIC'.Create(nil);
  tPES_CLIENTE :=  'PES_CLIENTE'.Create(nil);
  tPRD_PRODUTO :=  'PRD_PRODUTO'.Create(nil);
  //tCDF_MPTER :=  'CDF_MPTER'.Create(nil);
  tFIS_REGRAFISCAL :=  'FIS_REGRAFISCAL'.Create(nil);
  tFIS_REGRASRV :=  'FIS_REGRASRV'.Create(nil);
  tFIS_REGRAIMPOSTO :=  'FIS_REGRAIMPOSTO'.Create(nil);
  tFIS_TIPI :=  'FIS_TIPI'.Create(nil);
  tFIS_CST :=  'FIS_CST'.Create(nil);
  //tFIS_INFOFISCAL :=  'FIS_INFOFISCAL'.Create(nil);
  tPRD_PRDREGRAFISCAL :=  'PRD_PRDREGRAFISCAL'.Create(nil);
  //tFIS_DECRETOCAPA :=  'FIS_DECRETOCAPA'.Create(nil);
  tFIS_DECRETO :=  'FIS_DECRETO'.Create(nil);
  tFIS_ALIQUOTAICMSUF :=  'FIS_ALIQUOTAICMSUF'.Create(nil);
  tTMP_NR09 :=  'TMP_NR09'.Create(nil);
  tFIS_IMPOSTO :=  'FIS_IMPOSTO'.Create(nil);

  // calculado ???
  tFIS_IMPOSTO._LstCalc := 'VL_IMPOSTO:N(15)|VL_OUTRO:N(15)|VL_ISENTO:N(15)|VL_BASECALC:N(15)|PR_REDUBASE:N(6)|PR_BASECALC:N(6)|CD_CST:A(3)|';

  // filhas ???
  tPES_PESSOA._LstFilha := 'PES_PESSOACLAS|PES_PESJURIDICA|PES_PESFISICA|';
  tPRD_PRODUTO._LstFilha := 'FIS_TIPI|';
  tFIS_REGRAFISCAL._LstFilha := 'FIS_DECRETO|FIS_REGRAIMPOSTO|';
end;

//--------------------------------------------------------
function T_FISSVCO015.getParam(pParams : String) : String;
//--------------------------------------------------------
var
  vDsLstCFOP : String;
  pCdEmpresa : Real;
  vNrCFOP : Real;
begin
  pCdEmpresa :=  pParams.'CD_EMPRESA';
  if (pCdEmpresa = 0) then begin
    pCdEmpresa :=  PARAM_GLB.'CD_EMPRESA';
  end;

  (* parametro corporativo *)
  xParam := '';
  put 'CD_EMPVALOR'.xParam;
  put 'CD_CLAS_REG_ESPECIAL_SC'.xParam;
  put 'CD_ATIVIDADE_VAREJISTA'.xParam;
  put 'PR_ALIQ_ICMS_MANAUS'.xParam;
  put 'IN_PRODPROPRIA_DEC1643'.xParam;
  put 'DS_LST_CFOP_IPI_BC_PISCOF'.xParam;
  xParam := 'ADMSVCO001'.{mtp}( xParam);

  gCdEmpresaValorSis :=  xParam.'CD_EMPVALOR';
  gCdClasRegEspecialSC :=  xParam.'CD_CLAS_REG_ESPECIAL_SC';
  gCdAtividadeVarejista :=  xParam.'CD_ATIVIDADE_VAREJISTA';
  gPrAliqICMSManaus :=  xParam.'PR_ALIQ_ICMS_MANAUS';
  gInProdPropriaDec1643 :=  xParam.'IN_PRODPROPRIA_DEC1643';
  gDsLstCfopIpiBcPisCof :=  xParam.'DS_LST_CFOP_IPI_BC_PISCOF';

  (* parametro empresa *)
  xParamEmp := '';
  put 'CD_EMPRESA_VALOR'.xParamEmp;
  put 'IN_OPT_SIMPLES'.xParamEmp;
  put 'IN_IMPOSTO_OFFLINE'.xParamEmp;
  put 'IN_PDV_OTIMIZADO'.xParamEmp;
  put 'IN_ATIVA_DECRETO_52104'.xParamEmp;
  put 'NATUREZA_COMERCIAL_EMP'.xParamEmp;
  put 'IN_SOMA_FRETE_BASEICMS'.xParamEmp;
  put 'IN_CALC_IPI_OUT_ENT_SAI'.xParamEmp;
  put 'IN_CALC_ICMS_ENT_SIMPLES'.xParamEmp;
  put 'PR_APLIC_MVA_SUB_TRIB'.xParamEmp;
  put 'IN_ARREDONDA_TRUNCA_ICMS'.xParamEmp;
  put 'DS_LST_MODDCTOFISCAL_AT'.xParamEmp;
  put 'IN_DESCONTA_PISCOFINS_ALC'.xParamEmp;
  put 'IN_DESCONTA_PISCOFINS_ZFM'.xParamEmp;
  put 'IN_RED_BASE_ICMS'.xParamEmp;
  xParamEmp := 'ADMSVCO001'.{mtp}( pCdEmpresa, xParamEmp);

  gCdEmpresaValorEmp :=  xParamEmp.'CD_EMPRESA_VALOR' ;
  gInOptSimples :=  xParamEmp.'IN_OPT_SIMPLES';
  gInImpostoOffLine :=  xParamEmp.'IN_IMPOSTO_OFFLINE';
  gInPDVOtimizado  :=  xParamEmp.'IN_PDV_OTIMIZADO';
  gInAtivaDecreto52104 :=  xParamEmp.'IN_ATIVA_DECRETO_52104';
  gNaturezaComercialEmp :=  xParamEmp.'NATUREZA_COMERCIAL_EMP';
  gInSomaFreteBaseICMS :=  xParamEmp.'IN_SOMA_FRETE_BASEICMS';
  gInCalcIpiOutEntSai :=  xParamEmp.'IN_CALC_IPI_OUT_ENT_SAI';
  gInCalculaIcmsEntSimples :=  xParamEmp.'IN_CALC_ICMS_ENT_SIMPLES' ;
  gPrAplicMvaSubTrib :=  xParamEmp.'PR_APLIC_MVA_SUB_TRIB';
  gInArredondaTruncaIcms :=  xParamEmp.'IN_ARREDONDA_TRUNCA_ICMS';
  gDsLstModDctoFiscalAT :=  xParamEmp.'DS_LST_MODDCTOFISCAL_AT';
  gInDescontaPisCofinsAlc :=  xParamEmp.'IN_DESCONTA_PISCOFINS_ALC';
  gInDescontaPisCofinsZfm :=  xParamEmp.'IN_DESCONTA_PISCOFINS_ZFM';
  gInRedBaseIcms  :=  xParamEmp.'IN_RED_BASE_ICMS';

  tTMP_NR09.Limpar();

  vDsLstCFOP := gDsLstCfopIpiBcPisCof;
  if (vDsLstCFOP <> '') then begin
    repeat
      vNrCFOP := IffNuloF(getitemGld(vDsLstCFOP,1),0);
      delitemGld(vDsLstCFOP,1);
      if (vNrCFOP > 0) then begin
        tTMP_NR09, 1.Append();
        tTMP_NR09. 'NR_GERAL' :=  vNrCFOP;
        tTMP_NR09.Consultar();
      end;  
    until(vDsLstCFOP = '')
  end;

  return(0);
end;

//-----------------
function T_FISSVCO015.calculaICMS(pParams : String) : String;
//-----------------
const
  cDS_METHOD = 'ADICIONAL=Operação: FISSVCO015.calculaICMS()';
var
  vCdCST : String;
  vVlCalc, vVlBaseCalc, vCdDecreto, vTpProduto : Real;
  vDtSistema : TDateTime;
  vInDecreto, vInPrRedBase, vInPrRedImposto, vInReducao : Boolean;
begin

  vDtSistema :=  PARAM_GLB.'DT_SISTEMA';

  if (gInImpostoOffLine = True) then begin
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;

  gVlICMS := 0;
  gCdDecreto := 0;
  vCdDecreto := 0;
  vInDecreto := False;

  if ( tFIS_DECRETO.'CD_DECRETO' > 0) then begin
    vCdDecreto :=  tFIS_DECRETO.'CD_DECRETO';
    if ( tFIS_DECRETO.'DT_INIVIGENCIA' > 0) and (vDtSistema <  tFIS_DECRETO.'DT_INIVIGENCIA') then begin
      vCdDecreto := 0;
    end;
    if ( tFIS_DECRETO.'DT_FIMVIGENCIA' > 0) and (vDtSistema >  tFIS_DECRETO.'DT_FIMVIGENCIA') then begin
      vCdDecreto := 0;
    end;
  end;

  vCdCST := Copy(gCdCST,2,2);
  vTpProduto := StrToFloat(Copy(gCdCST,1,1));
  
  if (vCdCST = '60') then begin
    tFIS_IMPOSTO.Remover();
    gCdDecreto := vCdDecreto;
    return(-1); exit;
  end else if (vCdCST <> '00') and (vCdCST <> '10') and (vCdCST <> '20') and (vCdCST <> '30') and (vCdCST <> '40') and (vCdCST <> '41') and (vCdCST <> '50') and (vCdCST <> '51') and (vCdCST <> '70') and (vCdCST <> '90') then begin
    if (vCdDecreto <> 2155) and (vCdDecreto <> 1020) and (vCdDecreto <> 45471) and (vCdDecreto <> 52364)
    and (vCdDecreto <> 23731) and (vCdDecreto <> 23732) and (vCdDecreto <> 23733) and (vCdDecreto <> 23734)
    and (vCdDecreto <> 23735) and (vCdDecreto <> 10901) and (vCdDecreto <> 10902) and (vCdDecreto <> 10903)
    and (vCdDecreto <> 10904) and (vCdDecreto <> 2559) and (vCdDecreto <> 52804)
    and (vCdDecreto <> 10201) and (vCdDecreto <> 10202) and (vCdDecreto <> 10203) then begin
      tFIS_IMPOSTO.Remover();
      gCdDecreto := vCdDecreto;
      return(-1); exit;
    end;
  end;

  if ( tFIS_REGRAFISCAL.'TP_ALIQICMS' = '') then begin
    if ( tGER_OPERACAO.'TP_MODALIDADE' = 'E') then begin // Conhecimento de Frete
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
    end else begin
      if (gTpAreaComercioOrigem = 2) and (gTpAreaComercioDestino = 2) then begin // 2 - Manaus
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  gPrAliqICMSManaus;
      end else begin
        if (gDsUFOrigem = 'MG') and (gDsUFDestino = 'MG')  then begin
          if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) and (gInContribuinte = True) and (gInProdPropria = True) then begin
            tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
          end else begin
            tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
          end;
        end else begin
          //A alíquota diferenciada so pode se aplicada em NF estadual
          //Nas outra é obrigatorio respeitar a aliquota interestadual
          //A observação acima somente é valido quando há somente uma alíquota interna.
          //A lógica abaixo foi implementada p/ atender o Estado do PR que passou a trabalhar com várias alíquotas internas
          //Neste caso será obedecido o que está na regra fiscal tanto dentro do Estado quanto fora,
          //desde que seja venda p/ consumidor final
          if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0)  then begin
            if (gDsUFOrigem = gDsUFDestino) or (gInContribuinte = False) then begin
              tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
            end else begin
              tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
            end;
          end else begin
            tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
          end;
        end;
      end;
    end;
  end else begin
    if ( tFIS_REGRAFISCAL.'TP_ALIQICMS' = 'A')then begin // Para transações de operação Estadual
      if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0)  then begin
        if (gDsUFOrigem = gDsUFDestino) then begin
          tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
        end else begin
          tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
        end;
      end else begin
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
      end;
    end else if ( tFIS_REGRAFISCAL.'TP_ALIQICMS' = 'B')then begin // Para transações de operação Interestadual
      if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0)  then begin
        if (gDsUFOrigem <> gDsUFDestino) then begin
          tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
        end else begin
          tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
        end;
      end else begin 
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
      end;
    end else if ( tFIS_REGRAFISCAL.'TP_ALIQICMS' = 'C')then begin // Para transações de ambas as operações
      if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0)  then begin
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
      end else begin 
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
      end;
    end;
  end;
  //Emissão de terceiro e diferente de devolucao ou devolução de compra com emissão própria
  if ((gTpOrigemEmissao = 2) and ( tGER_OPERACAO.'TP_MODALIDADE' <> '3'))
  or ((gTpOrigemEmissao = 1) and ( tGER_OPERACAO.'TP_MODALIDADE' = '3') and (item_a('TP_OPERACAO', tGER_OPERACAO) = 'S')) then begin
    if not (gInCalculaIcmsEntSimples) then begin
      if (gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3) then begin //2-Simples 3-EPP
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
      end;
    end;
    if (gTpOrigemEmissao = 1) then begin
      if (gInOptSimples = True) then begin
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
      end;
    end;
  end else begin
    if (gInOptSimples = True) then begin
      if (gDsUFOrigem <> 'PR')
      and (( tGER_OPERACAO.'TP_DOCTO' = 2) or ( tGER_OPERACAO.'TP_DOCTO' = 3))
      and ((vCdCST = '00') or (vCdCST = '20') or (vCdCST = '51')) then begin // 2 - ECF - Nao concomitante / 3 - ECF - Concomitante;
      end else begin
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
      end;
    end;
  end;
 
  if ( tGER_OPERACAO.'TP_MODALIDADE' = '4') and (item_a('TP_OPERACAO', tGER_OPERACAO) = 'S')then begin // Venda
    if (vTpProduto = 1) then begin //Produto Importado
      if (gDsUFOrigem = 'ES') and (gDsUFDestino = 'ES') then begin
        if (gInContribuinte = True) then begin
          if (gInVarejista = True) then begin
            tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
          end else begin
            tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  12;
          end;
        end else begin
          tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
        end;
      end;
    end;
  end;

  if ( tGER_OPERACAO.'TP_MODALIDADE' = 4) and ( tGER_OPERACAO.'TP_OPERACAO' = 'E') then begin // Compra
    if (gDsUFOrigem = 'SC') and (gDsUFDestino = 'SC') then begin
      if (gTpOrigemEmissao = 2) then begin // 2 - Emissao terceiro
        if (gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3) then begin //2-Simples 3-EPP
          tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  7;
        end;
      end;
    end;
  end;
  if (vCdDecreto = 949) then begin // Este decreto foi revogado pelo decreto 6142 a partir de fevereiro/2006
    if (gDsUFOrigem = 'PR') then begin
      if (gTpOrigemEmissao = 1) then begin //Emissão própria
        if (gDsUFDestino = 'PR') and (gInContribuinte = True) then begin
          vInDecreto := True;
        end;
      end else begin 
        if (gDsUFDestino = 'PR') and (gInContribuinte = True) then begin
          vInDecreto := True;
        end;
      end;
    end;
    if (vInDecreto = True) then begin
      tFIS_IMPOSTO. 'PR_BASECALC' :=  66.67;
      vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_BASECALC' / 100;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      gVlTotalLiquidoICMS := gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
      vCdCST := '20';
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 6692) then begin // Este decreto é somente para o Estado do Mato Grosso do Sul
    if (gDsUFOrigem = 'MS') then begin
      if (gDsUFDestino = 'MS') and (gInContribuinte = True) then begin
        vInDecreto := True;
      end;
      if (vInDecreto = True) then begin
        tFIS_IMPOSTO. 'PR_BASECALC' :=  41.176;
        vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_BASECALC' / 100;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
        gVlTotalLiquidoICMS := gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
        vCdCST := '20';
        gCdDecreto := vCdDecreto;
      end;
    end;
  end else if (vCdDecreto = 6142) then begin
    if (gInOptSimples <> True) then begin
      if (gDsUFOrigem = 'PR')   then begin
        if (gTpOrigemEmissao = 1) then begin //Emissão própria
          if (gDsUFDestino = 'PR') and (gInContribuinte = True) then begin
            vInDecreto := True;
          end;
        end else begin 
          if (gDsUFDestino = 'PR') and (gInContribuinte = True) then begin
            vInDecreto := True;
          end;
        end;
      end;
    end;
    if (vInDecreto = True) then begin
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 11589)  then begin
    if (gDsUFOrigem = 'PR') then begin
      if (gTpOrigemEmissao = 1) then begin //Emissão própria
        if (gDsUFDestino = 'PR') and (gInContribuinte = True) then begin
          vInDecreto := True;
        end;
      end else begin
        if (gDsUFDestino = 'PR') and (gInContribuinte = True) then begin
          vInDecreto := True;
        end;
      end;
    end;
    if (vInDecreto = True) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Decreto(11.589) não contemplado na legislação tributária do Paraná! Entrar em contato com os Analistas da área Fiscal da VirtualAge', cDS_METHOD);
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  12;
      gCdDecreto := vCdDecreto;
      return(-1); exit;
    end;
  end else if (vCdDecreto = 48786) or (vCdDecreto = 48958) or (vCdDecreto = 48959) or (vCdDecreto = 49115) then begin // O decreto 48042 foi substituido pelo 55652
    if (gDsUFOrigem = 'SP') then begin
      if (gTpOrigemEmissao = 1) then begin //Emissão própria
        //Venda / Devolução de venda
        if (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4))
        or (( tGER_OPERACAO.'TP_OPERACAO' = 'E') and ( tGER_OPERACAO.'TP_MODALIDADE' = 3)) then begin
          if (gDsUFDestino = 'SP') and (gInContribuinte = True) then begin
            if (gInAtivaDecreto52104 = True) then begin
              vInDecreto := True;
            end else begin
              if (gTpRegimeOrigem <> 2) and (gTpRegimeOrigem <> 3) then begin //2-Simples 3-EPP
                vInDecreto := True;
              end;
            end;
          end;
          if (gInProdPropria = True) then begin
          end else begin
            vInDecreto := False;
          end;
        end else begin
          if (gDsUFDestino = 'SP') and (gInContribuinte = True) then begin
            if (gInAtivaDecreto52104 = True) then begin
              vInDecreto := True;
            end else begin
              if (gTpRegimeOrigem <> 2) and (gTpRegimeOrigem <> 3) then begin //2-Simples 3-EPP
                vInDecreto := True;
              end;
            end;
          end;
        end;
      end else begin
        if (gDsUFDestino = 'SP') and (gInContribuinte = True) then begin
          if (gInAtivaDecreto52104 = True) then begin
            if (vTpProduto = 0) then begin //Nacional
              vInDecreto := True;
            end;
          end else begin
            if (gTpRegimeOrigem <> 2) and (gTpRegimeOrigem <> 3) then begin //2-Simples 3-EPP
              if (vTpProduto = 0) then begin //Nacional
                vInDecreto := True;
              end;
            end;
          end;
        end;
      end;
    end;
    if (vInDecreto = True) then begin
      if ( tFIS_IMPOSTO.'PR_ALIQUOTA' <> 18) and ( tFIS_IMPOSTO.'PR_ALIQUOTA' <> 25) then begin
        vInDecreto := False;
      end;
    end;
    if (vInDecreto = True) then begin
      if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 18) then begin
        tFIS_IMPOSTO. 'PR_BASECALC' :=  66.67;
      end else begin
        tFIS_IMPOSTO. 'PR_BASECALC' :=  48;
      end;
      vCdCST := '51';
      vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_BASECALC' / 100;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      gVlTotalLiquidoICMS := gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 55652) then begin // Este decreto substitui o 48042
    if (gDsUFOrigem = 'SP') then begin
      if (gTpOrigemEmissao = 1) then begin //Emissão própria
        //Venda / Devolução de venda
        if (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4))
        or (( tGER_OPERACAO.'TP_OPERACAO' = 'E') and ( tGER_OPERACAO.'TP_MODALIDADE' = 3)) then begin
          if (gDsUFDestino = 'SP') and (gInContribuinte = True) then begin
            if (gInAtivaDecreto52104 = True) then begin
              vInDecreto := True;
            end else begin
              if (gTpRegimeOrigem <> 2) and (gTpRegimeOrigem <> 3) then begin //2-Simples 3-EPP
                vInDecreto := True;
              end;
            end;
          end;
          if (gInProdPropria = True) then begin
          end else begin
            vInDecreto := False;
          end;
        end else begin
          if (gDsUFDestino = 'SP') and (gInContribuinte = True) then begin
            if (gInAtivaDecreto52104 = True) then begin
              vInDecreto := True;
            end else begin
              if (gTpRegimeOrigem <> 2) and (gTpRegimeOrigem <> 3) then begin //2-Simples 3-EPP
                vInDecreto := True;
              end;
            end;
          end;
        end;
      end else begin
        if (gDsUFDestino = 'SP') and (gInContribuinte = True) then begin
          if (gInAtivaDecreto52104 = True) then begin
            if (vTpProduto = 0) then begin //Nacional
              vInDecreto := True;
            end;
          end else begin
            if (gTpRegimeOrigem <> 2) and (gTpRegimeOrigem <> 3) then begin //2-Simples 3-EPP
              if (vTpProduto = 0) then begin //Nacional
                vInDecreto := True;
              end;
            end;
          end;
        end;
      end;
    end;
    if (vInDecreto = True) then begin
      if ( tFIS_IMPOSTO.'PR_ALIQUOTA' <> 18) and ( tFIS_IMPOSTO.'PR_ALIQUOTA' <> 25) then begin
        vInDecreto := False;
      end;
    end;
    if (vInDecreto = True) then begin
      if ( tFIS_REGRAFISCAL.'PR_REDUBASE' > 0) then begin
        tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100 -  tFIS_REGRAFISCAL.'PR_REDUBASE';
      end else begin
        if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 18) then begin
          tFIS_IMPOSTO. 'PR_BASECALC' :=  38.89;
        end else begin
          tFIS_IMPOSTO. 'PR_BASECALC' :=  28;
        end;
      end;
      vCdCST := '51';
      vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_BASECALC' / 100;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      gVlTotalLiquidoICMS := gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 2401) then begin
    if (gTpOrigemEmissao = 1) then begin //Emissão própria
      //Venda / Devolução de venda
      if (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4))
      or (( tGER_OPERACAO.'TP_OPERACAO' = 'E') and ( tGER_OPERACAO.'TP_MODALIDADE' = 3)) then begin
        if (gDsUFDestino <> gDsUFOrigem) and (gInContribuinte = True) then begin
          vInDecreto := True;
        end;
      end else begin 
        if (gDsUFDestino <> gDsUFOrigem) and (gInContribuinte = True) then begin
          vInDecreto := True;
        end;
      end;
    end else begin
      if (gDsUFDestino <> gDsUFOrigem) and (gInContribuinte = True) then begin
        vInDecreto := True;
      end;
    end;
    if (vInDecreto = True) then begin
      if ( tFIS_IMPOSTO.'PR_ALIQUOTA' <> 7) and ( tFIS_IMPOSTO.'PR_ALIQUOTA' <> 12) then begin
        vInDecreto := False;
      end;
    end;
    if (vInDecreto = True) then begin
      if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 7) then begin
        tFIS_IMPOSTO. 'PR_REDUBASE' :=  9.9;
      end else if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 12) then begin
        tFIS_IMPOSTO. 'PR_REDUBASE' :=  10.49;
      end;
      vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_REDUBASE' / 100;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquidoICMS - rounded(vVlCalc, 6);
      gVlTotalLiquidoICMS := rounded(vVlCalc, 6);
       vCdCST := '20';
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 1643) and ((gInProdPropriaDec1643 = False) or (gInProdPropria = True)) then begin
    if (gDsUFOrigem = 'ES') and (gDsUFDestino = 'ES') then begin
      if (gInContribuinte = True) and ((gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3))then begin // 2-Simples 3-EPP
        tFIS_IMPOSTO. 'PR_BASECALC' :=  41.177;
        tFIS_IMPOSTO. 'PR_REDUBASE' :=  58.823;
        vInDecreto := True;
      end else if (gInContribuinte = True) and (gTpRegimeOrigem <> 2) and (gTpRegimeOrigem <> 3)then begin // Empresa Normal
        if (gDsUFDestino <> gDsUFOrigem) then begin
          // Conforme consulta ao IOB pelo Sr. Deusdete, nao foi confirmado esta reducao para operacao interestadual
        end else begin
          tFIS_IMPOSTO. 'PR_BASECALC' :=  70.589;
          tFIS_IMPOSTO. 'PR_REDUBASE' :=  29.411;
          vInDecreto := True;
        end;
      end;

      if (vInDecreto = True) then begin
        vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_BASECALC' / 100;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
        gVlTotalLiquidoICMS := gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
        vCdCST := '20';
        gCdDecreto := vCdDecreto;
      end;
    end;
  end else if (vCdDecreto = 44238) then begin // Decreto valido para o estado do Rio Grande do Sul
    if (gDsUFOrigem = 'RS') and (gDsUFDestino = 'RS') then begin
      if (gInContribuinte = True)
      and (( tGER_OPERACAO.'TP_MODALIDADE' = '3') or ( tGER_OPERACAO.'TP_MODALIDADE' = 4)) then begin // 3 - Devolucao / 4 - Venda/Compra
        if (gTpOrigemEmissao = 1) then begin //Emissão própria
          if (gInProdPropria = True) then begin
            tFIS_IMPOSTO. 'PR_BASECALC' :=  70.589;
            tFIS_IMPOSTO. 'PR_REDUBASE' :=  29.411;
            vInDecreto := True;
          end;
        end else begin
          tFIS_IMPOSTO. 'PR_BASECALC' :=  70.589;
          tFIS_IMPOSTO. 'PR_REDUBASE' :=  29.411;
          vInDecreto := True;
        end;
      end;

      if (vInDecreto = True) then begin
        vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_BASECALC' / 100;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
        gVlTotalLiquidoICMS := gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
        vCdCST := '20';
        gCdDecreto := vCdDecreto;
      end;
    end;
  end else if (vCdDecreto = 105) then begin // Decreto valido para o estado de Santa Catarina
    if (gDsUFOrigem = 'SC') then begin
      if (gDsUFDestino = 'SC') and (gInContribuinte = True)
      and ((( tGER_OPERACAO.'TP_OPERACAO' = 'E') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4))
        or (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4))) then begin //Compra / Venda
        if (gCdClasRegEspecialSC <> '') then begin
          tPES_PESSOACLAS.Limpar();
          tPES_PESSOACLAS. 'CD_PESSOA' :=  '';
          tPES_PESSOACLAS. 'CD_TIPOCLAS' :=  gCdClasRegEspecialSC;
          tPES_PESSOACLAS.Consultar();
          if ( tPES_PESSOACLAS.'CD_CLASSIFICACAO' = 'S') then begin
            tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  12;
            vCdCST := '00';
            gCdDecreto := vCdDecreto;
            vInDecreto := True;
          end;
        end;
      end;
    end;
  end else if (vCdDecreto = 13214) then begin // Decreto valido para o estado do Paraná
    if (gDsUFOrigem = 'PR') or (gDsUFDestino = 'PR') then begin
      if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // Venda/Compra
        if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 7) then begin
          tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
          vInDecreto := True;
        end else if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 12) then begin
          tFIS_IMPOSTO. 'PR_BASECALC' :=  58.332;
          tFIS_IMPOSTO. 'PR_REDUBASE' :=  41.668;
          vInDecreto := True;
        end else if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 18) then begin
          tFIS_IMPOSTO. 'PR_BASECALC' :=  38.887;
          tFIS_IMPOSTO. 'PR_REDUBASE' :=  61.113;
          vInDecreto := True;
        end;
      end;

      if (vInDecreto = True) then begin
        vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_BASECALC' / 100;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
        gVlTotalLiquidoICMS := gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
        vCdCST := '20';
        gCdDecreto := vCdDecreto;
      end;
    end;
  end else if (vCdDecreto = 12462) then begin // Decreto valido para o estado de Goiás
    if (gDsUFOrigem = 'GO') and (gDsUFDestino = 'GO') then begin
      if (gInContribuinte = True)
      and (( tGER_OPERACAO.'TP_MODALIDADE' = 2) or ( tGER_OPERACAO.'TP_MODALIDADE' = 3) or ( tGER_OPERACAO.'TP_MODALIDADE' = 4)) then begin
        //2 - Transferencia / 3 - Devolucao / 4 - Venda/Compra
        tFIS_IMPOSTO. 'PR_BASECALC' :=  58.82;
        tFIS_IMPOSTO. 'PR_REDUBASE' :=  41.18;
        vInDecreto := True;
      end;

      if (vInDecreto = True) then begin
        vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_BASECALC' / 100;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
        gVlTotalLiquidoICMS := gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
        vCdCST := '20';
        gCdDecreto := vCdDecreto;
      end;
    end;
  end else begin
    gCdDecreto := vCdDecreto;
  end;

  if (vCdCST = '00') or (vCdCST = '10') then begin
    if (vCdDecreto = 52364)then begin // Decreto do Estado de São Paulo
      if ( tFIS_REGRAFISCAL.'PR_REDUBASE' > 0) then begin
        tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100 -  tFIS_REGRAFISCAL.'PR_REDUBASE';
        vVlCalc := gVlTotalLiquidoICMS - (gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_REDUBASE' / 100);
        tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      end else begin
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquidoICMS;
      end;
      tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
    end else if (vCdDecreto = 23731) or (vCdDecreto = 23732) or (vCdDecreto = 23733) or (vCdDecreto = 23734) or (vCdDecreto = 23735)then begin // Decreto do Estado do Paraná
      if ( tFIS_REGRAFISCAL.'PR_REDUBASE' > 0) then begin
        tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100 -  tFIS_REGRAFISCAL.'PR_REDUBASE';
        vVlCalc := gVlTotalLiquidoICMS - (gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_REDUBASE' / 100);
        tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      end else begin
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquidoICMS;
      end;
      tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
      gVlTotalLiquidoICMS :=  tFIS_IMPOSTO.'VL_BASECALC';
    end else if (vCdDecreto = 10901) or (vCdDecreto = 10902) or (vCdDecreto = 10903) or (vCdDecreto = 10904)then begin // Decreto do Estado de Espirito Santo
      if ( tFIS_REGRAFISCAL.'PR_REDUBASE' > 0) then begin
        if (gDsUFOrigem = 'ES') and (gDsUFDestino = 'ES') then begin
          tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
          tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquidoICMS;
        end else begin
          tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
          tFIS_IMPOSTO. 'PR_BASECALC' :=  100 -  tFIS_REGRAFISCAL.'PR_REDUBASE';
          vVlCalc := gVlTotalLiquidoICMS - (gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_REDUBASE' / 100);
          tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
        end;
      end else begin
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquidoICMS;
      end;
      tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
      gVlTotalLiquidoICMS :=  tFIS_IMPOSTO.'VL_BASECALC';
    end else begin
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquidoICMS;
      if ((gCdDecreto = 1643) and ((gInProdPropriaDec1643 = False) or (gInProdPropria = True))) or (gCdDecreto = 56066)then begin
        gCdDecreto := 0;
        vInDecreto := False;
      end;
    end;
    //Quando for substituiçao tributária não contemplada(CST 00) para não contribuinte não é aplicado o decreto
    if (vCdCST = '00')
    and (( tFIS_REGRAFISCAL.'CD_CST' = '10') or ( tFIS_REGRAFISCAL.'CD_CST' = '60') or ( tFIS_REGRAFISCAL.'CD_CST' = '70')) then begin
      gCdDecreto := 0;
    end;
    if (vCdCST = '10')
    and (( tGER_OPERACAO.'TP_OPERACAO' = 'E') and ( tGER_OPERACAO.'TP_MODALIDADE' <> 3)) then begin // Entrada e não for devolução
      if ( tFIS_IMPOSTO.'VL_BASECALC' > 0) then begin
        vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
        gVlICMS := rounded(vVlCalc, 6);
      end;
      tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_OUTRO' + item_f('VL_BASECALC', tFIS_IMPOSTO);
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
      tFIS_IMPOSTO. 'PR_BASECALC' :=  0;
      tFIS_IMPOSTO. 'PR_REDUBASE' :=  0;
    end;
  end else if (vCdCST = '20') or (vCdCST = '70') or (vCdCST = '30') then begin
    if (vInDecreto = True) then begin
      if (vCdDecreto = 12462)
      or ((vCdDecreto = 1643) and ((gInProdPropriaDec1643 = False) or (gInProdPropria = True))) then begin
        tFIS_IMPOSTO. 'VL_ISENTO' :=  gVlTotalLiquidoICMS;
      end else begin
        tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS;
      end;
    end else begin
      vInReducao := False;
      if ( tFIS_REGRAFISCAL.'PR_REDUBASE' > 0) and (gInContribuinte = True) then begin
        if ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin
          if ((gInRedBaseIcms = True) and (gInProdPropria = True))
          or (gInRedBaseIcms = False)
          or ( tFIS_REGRAFISCAL.'CD_CFOPPROPRIA' = 5551)
          or ( tGER_OPERACAO.'TP_MODALIDADE' = '3')
          or ((gTpOrigemEmissao = 1) and (gDsUFOrigem = 'RS')) then begin
            vInReducao := True;
            vCdDecreto :=  tFIS_DECRETO.'CD_DECRETO';
            vInDecreto := True;
          end else begin
            vCdDecreto := 0;
            vInDecreto := False;
          end;
        end else begin
          if (( tGER_OPERACAO.'TP_MODALIDADE' <> '3') or (( tGER_OPERACAO.'TP_MODALIDADE' = '3') and ((gInRedBaseIcms = True) and (gInProdPropria = True)) or (gInRedBaseIcms = False) ) )
          or ((gTpOrigemEmissao = 2) and (gDsUFDestino = 'RS')) then begin
            vInReducao := True;
            vCdDecreto :=  tFIS_DECRETO.'CD_DECRETO';
            vInDecreto := True;
          end else begin
            vCdDecreto := 0;
            vInDecreto := False;
          end;
        end;
      end else begin 
        vCdDecreto := 0;
        vInDecreto := False;
      end;

      if (vInReducao = True) then begin
        vInPrRedBase := False;
        vInPrRedImposto := False;

        if (gInContribuinte = True) then begin
          if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'A') then begin
            if (gDsUFOrigem = gDsUFDestino) then begin
              vInPrRedBase := True;
              gCdDecreto := vCdDecreto;
            end;

          end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'B') then begin
            if (gDsUFOrigem = gDsUFDestino) then begin
              vInPrRedImposto := True;
              gCdDecreto := vCdDecreto;
            end;

          end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'C') then begin
            if (gDsUFOrigem = gDsUFDestino) then begin
              vInPrRedBase := True;
              vInPrRedImposto := True;
              gCdDecreto := vCdDecreto;
            end;

          end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'D') then begin
            if (gDsUFOrigem <> gDsUFDestino) then begin
              vInPrRedBase := True;
              gCdDecreto := vCdDecreto;
            end;

          end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'E') then begin
            if (gDsUFOrigem <> gDsUFDestino) then begin
              vInPrRedImposto := True;
              gCdDecreto := vCdDecreto;
            end;

          end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'F') then begin
            if (gDsUFOrigem <> gDsUFDestino) then begin
              vInPrRedBase := True;
              vInPrRedImposto := True;
              gCdDecreto := vCdDecreto;
            end;

          end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'G') then begin
            vInPrRedBase := True;
            gCdDecreto := vCdDecreto;

          end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'H') then begin
            vInPrRedImposto := True;
            gCdDecreto := vCdDecreto;

          end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'I') then begin
            vInPrRedBase := True;
            vInPrRedImposto := True;
            gCdDecreto := vCdDecreto;
          end;
        end else begin 
          vInPrRedBase := True;
          vInPrRedImposto := True;
        end;

        if (vInPrRedBase <> True) and (gCdDecreto <> 6142) then begin
          tFIS_IMPOSTO. 'PR_REDUBASE' :=  0;
          tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
          vVlCalc := gVlTotalLiquidoICMS - (gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_REDUBASE' / 100);
          tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
          gCdDecreto := 0;
          vInDecreto := False;
        end else begin
          tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
          tFIS_IMPOSTO. 'PR_BASECALC' :=  100 -  tFIS_REGRAFISCAL.'PR_REDUBASE';
          vVlCalc := gVlTotalLiquidoICMS - (gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_REDUBASE' / 100);
          tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
        end;

      end else begin
        vCdCST := '00';
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquidoICMS;
        if ((gCdDecreto = 1643)and((gInProdPropriaDec1643 = False)or(gInProdPropria = True))) or (gCdDecreto = 56066) then begin
          gCdDecreto := 0;
          vInDecreto := False;
        end;
      end;
      tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
    end;
    if (vCdCST = '30') or (vCdCST = '70') then begin
      if ( tGER_OPERACAO.'TP_OPERACAO' = 'E') or (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and (gInOptSimples = True)) then begin
        if ( tFIS_IMPOSTO.'VL_BASECALC' > 0) then begin
          vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
          gVlICMS := rounded(vVlCalc, 6);
        end;
        tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_OUTRO' + item_f('VL_BASECALC', tFIS_IMPOSTO);
        tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
        tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
        tFIS_IMPOSTO. 'PR_BASECALC' :=  0;
        tFIS_IMPOSTO. 'PR_REDUBASE' :=  0;
      end;
    end;
    if (vCdCST = '30') and (gInOptSimples = False) then begin
      gVlTotalLiquidoICMS :=  tFIS_IMPOSTO.'VL_OUTRO' + item_f('VL_BASECALC', tFIS_IMPOSTO);
      vVlCalc := gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_ALIQUOTA' / 100;
      gVlICMS := rounded(vVlCalc, 6);
      tFIS_IMPOSTO.Remover();
      return(-1); exit;
    end;
  end else if (vCdCST = '40') or (vCdCST = '41') then begin
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
    tFIS_IMPOSTO. 'VL_ISENTO' :=  gVlTotalLiquidoICMS;
  end else if (vCdCST = '50') then begin
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
    tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS;
  end else if (vCdCST = '51') then begin
    if (vInDecreto = True)  then begin
      tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS;
    end else begin
      if ( tFIS_REGRAFISCAL.'PR_REDUBASE' > 0) then begin
        tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
        vVlCalc := gVlTotalLiquidoICMS - (gVlTotalLiquidoICMS *  tFIS_IMPOSTO.'PR_REDUBASE' / 100);
        tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
        tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS -  tFIS_IMPOSTO.'VL_BASECALC';
      end else begin
        tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS;
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      end;
    end;
  end else if (vCdCST = '60') then begin
    if (vInDecreto = True) then begin
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquidoICMS;
    end;
  end else begin
    tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS;
  end;
  // Move a base de calculo para outros quando for entrada de fornecedor optante pelo simples
  if (gTpOrigemEmissao = 2) and ( tGER_OPERACAO.'TP_MODALIDADE' <> 3) then begin
    if (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'MG') or (gDsUFOrigem = 'SP') or (gDsUFOrigem = 'RJ') or (gDsUFOrigem = 'CE') or (gDsUFOrigem = 'RS') then begin
      if (gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3) then begin //2-Simples 3-EPP
        tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_OUTRO' + item_f('VL_BASECALC', tFIS_IMPOSTO);
        tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
      end;
    end;
  end;

  //Origem estrangeira - importacão direta
  if ( tFIS_IMPOSTO.'VL_BASECALC' > 0) and (vTpProduto = 1)  then begin
    if (( tGER_OPERACAO.'TP_OPERACAO' = 'S') or ( tGER_OPERACAO.'TP_OPERACAO' = 'E'))
    and (( tGER_OPERACAO.'TP_MODALIDADE' = 3) or ( tGER_OPERACAO.'TP_MODALIDADE' = 'C')) then begin // Saída ou entrada por devolução ou C - Consignacao
      if ( tPES_CLIENTE.'IN_CNSRFINAL' = True) then begin
        tFIS_IMPOSTO. 'VL_BASECALC' :=   tFIS_IMPOSTO.'VL_BASECALC' + gVlIPI;
      end;
    end else begin
      tFIS_IMPOSTO. 'VL_BASECALC' :=   tFIS_IMPOSTO.'VL_BASECALC' + gVlIPI;
    end;
  end;

  if ( tFIS_IMPOSTO.'VL_BASECALC' > 0) then begin
    vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
  end else begin
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
  end;

  if (gCdDecreto = 6142)  then begin
    vVlCalc :=  tFIS_IMPOSTO.'VL_IMPOSTO' * 66.67 / 100;
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
  end else begin 
    if (vInPrRedImposto = True) and ( tFIS_REGRAFISCAL.'PR_REDUBASE' > 0) then begin
      if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'B') or ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'E') or ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'H') then begin
        vVlCalc := ( tFIS_IMPOSTO.'VL_BASECALC' * ((100 - item_f('PR_REDUBASE', tFIS_REGRAFISCAL))/100) * item_f('PR_ALIQUOTA', tFIS_IMPOSTO)) / 100;
        tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
        gCdDecreto := vCdDecreto;
      end;

      if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'C') or ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'F') or ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'I') then begin
        vVlCalc := ( tFIS_IMPOSTO.'VL_IMPOSTO' * (100 - item_f('PR_REDUBASE', tFIS_REGRAFISCAL))) / 100;
        tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
        gCdDecreto := vCdDecreto;
      end;
    end;
  end;

  if (gTpModDctoFiscal = 85) or (gTpModDctoFiscal = 87) then begin
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  item_F('VL_BASECALC', tFIS_IMPOSTO);
    tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
    tFIS_IMPOSTO. 'PR_REDUBASE' :=  0;
    tFIS_IMPOSTO. 'PR_BASECALC' :=  0;
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
    tFIS_IMPOSTO. 'VL_OUTRO' :=  0;
    tFIS_IMPOSTO. 'VL_ISENTO' :=  0;
  end;

  if (gVlICMS = 0) then begin
    gVlICMS :=  tFIS_IMPOSTO.'VL_IMPOSTO';
  end;

  gCdCST := Copy(gCdCST,1,1) + vCdCST;

  //Zerar a alíquota se o CST=90 e o valor do ICMS for zero. then begin
  if (vCdCST = '90') and (gVlICMS = 0) then begin
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
  end;

  //Se a capa tiver Imposto sobre o Frete/Seguro/Desp.Acessoria será zerado o valor da Base de Calculo e jogado para o Vl.Outros.
  if (vCdCST = '90')
  and ((gVlFrete > 0) or (gVlSeguro > 0) or (gVlDespAcessor > 0))
  and (gVlICMS > 0) then begin
    tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_BASECALC';
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
    tFIS_IMPOSTO. 'PR_BASECALC' :=  0;
    tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
  end;
  return(0);
end;

//----------------------
function T_FISSVCO015.calculaICMSSubst(pParams : String) : String;
//----------------------
const
  cDS_METHOD = 'ADICIONAL=Operação: FISSVCO015.calculaICMSSubst()';
var
  vCdCST, viParams, voParams, vTpOperacao : String;
  vPrIVA, vVlCalc, vVlBaseCalc, vVlICMS, vTpProduto, vCdDecreto, vVlAliquotaInter, vVlAliquotaIntra, vCdCFOP : Real;
  vPrIvaPrd, vPrICMS, vVlAliquotaDestino, vVlAliquotaOrigem : Real;
  vInDecreto, vInCalcula : Boolean;
  vDtSistema, vDtIniVigencia, vDtFimVigencia : TDateTime;
begin

  if (gInImpostoOffLine = True) then begin
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;

  vDtSistema :=  PARAM_GLB.'DT_SISTEMA';
  vTpProduto := StrToFloat(Copy(gCdCST,1,1));
  vCdCST := Copy(gCdCST,2,2);
  vTpOperacao :=  tGER_OPERACAO.'TP_OPERACAO';

  if (vCdCST <> '10') and (vCdCST <> '30') and (vCdCST <> '60') and (vCdCST <> '70') then begin
    if (gCdDecreto = 2155) or (gCdDecreto = 1020) or (gCdDecreto = 45471) or (gCdDecreto = 23731)
    or (gCdDecreto = 23732) or (gCdDecreto = 23733) or (gCdDecreto = 23734) or (gCdDecreto = 23735)
    or (gCdDecreto = 10201) or (gCdDecreto = 10202) or (gCdDecreto = 10203) then begin
      gCdDecreto := 0;
    end;
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;
  gCdDecreto := 0;
  vCdDecreto := 0;
  vInDecreto := False;

  if (gCdDecretoItemCapa <> 0) then begin
    tFIS_DECRETO.Limpar();
    tFIS_DECRETO. 'CD_DECRETO' :=  gCdDecretoItemCapa;
    tFIS_DECRETO.Consultar();
    if ( tFIS_DECRETO.'CD_DECRETO' > 0) then begin
      vCdDecreto :=  tFIS_DECRETO.'CD_DECRETO';
      vDtIniVigencia :=  tFIS_DECRETO.'DT_INIVIGENCIA';
      vDtFimVigencia :=  tFIS_DECRETO.'DT_FIMVIGENCIA';
    end;
  end else begin
    if ( tFIS_DECRETO.'CD_DECRETO' > 0) then begin
      vCdDecreto :=  tFIS_DECRETO.'CD_DECRETO';
      vDtIniVigencia :=  tFIS_DECRETO.'DT_INIVIGENCIA';
      vDtFimVigencia :=  tFIS_DECRETO.'DT_FIMVIGENCIA';
    end;
  end;

  if (vCdDecreto > 0) then begin
    if (vDtIniVigencia > 0) and (vDtSistema < vDtIniVigencia) then begin
      vCdDecreto := 0;
    end;
    if (vDtFimVigencia > 0) and (vDtSistema > vDtFimVigencia) then begin
      vCdDecreto := 0;
    end;
  end;

  //A alíquota diferencia so pode se aplicada em NF estadual
  //Nas outra é obrigatorio respeitar a aliquota interestadual
  if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) and (gDsUFOrigem = gDsUFDestino) then begin
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
  end else if (vCdDecreto > 0) then begin
    tFIS_ALIQUOTAICMSUF.Limpar();
    tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
    tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
    tFIS_ALIQUOTAICMSUF.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFDestino + ' para ' + gDsUFDestino + '!', cDS_METHOD);
      return(-1); exit;
    end;
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
  end;

  vPrIVA := 30;

  //Emissão de terceiro e diferente de devolucao ou devolução de compra com emissão própria
  if ((gTpOrigemEmissao = 2) and ( tGER_OPERACAO.'TP_MODALIDADE' <> 3))
  or ((gTpOrigemEmissao = 1) and ( tGER_OPERACAO.'TP_MODALIDADE' = 3) and ( tGER_OPERACAO.'TP_OPERACAO' = 'S')) then begin
    if (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SC') or (gDsUFOrigem = 'MG') or (gDsUFOrigem = 'SP') or (gDsUFOrigem = 'RJ') or (gDsUFOrigem = 'CE') then begin
      if (gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3) then begin //2-Simples 3-EPP
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
      end;
    end;
    if (gTpOrigemEmissao = 1) then begin
    end;
  end else begin
  end;

  if (vCdDecreto = 2155) then begin // Decreto do Estado do Parana
    if (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'RS') or (gDsUFOrigem = 'SC') then begin
      if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
        if (gDsUFDestino = 'PR') or (gDsUFDestino = 'RS') or (gDsUFDestino = 'SC') then begin
          vPrIVA := 65.86;
          vInDecreto := True;
        end;
      end;
    end;

    if (vInDecreto = True) then begin
      if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) and (gDsUFOrigem = 'PR') and (gDsUFDestino = 'PR') then begin
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
      end else begin
        tFIS_ALIQUOTAICMSUF.Limpar();
        tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF.Consultar();
        if (xStatus < 0) then begin
          Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFDestino + ' para ' + gDsUFDestino + '!', cDS_METHOD);
          return(-1); exit;
        end;
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
      end;

      vVlCalc := gVlTotalLiquidoICMS + gVlIPI + ((gVlTotalLiquidoICMS + gVlIPI) * vPrIVA) / 100 ;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;

      vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * (item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100);
      vVlICMS := rounded(vVlCalc, 6) ;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  vVlICMS - gVlICMS;
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 1020) or (vCdDecreto = 10201) or (vCdDecreto = 10202) or (vCdDecreto = 10203) then begin // Decreto do Estado de Santa Catarina
    if (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SC') or (gDsUFOrigem = 'MG') then begin //Incluído o Estado de MG
      if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
        if (gDsUFDestino = 'PR') or (gDsUFDestino = 'SC') or (gDsUFDestino = 'MG') then begin //Incluído o Estado de MG
          if (vCdDecreto = 1020 ) then begin
            vPrIVA := 65.86;
            if (gDsUFDestino = 'SC') and ((gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3)) then begin //2-Simples 3-EPP
              vPrIVA := 19.758;
            end;
          end else if (vCdDecreto = 10201) then begin
            vPrIVA := 62.99;
            if (gDsUFDestino = 'SC') and ((gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3)) then begin
              vPrIVA := 18.897;
            end;
          end else if (vCdDecreto = 10202) then begin
            vPrIVA := 37.78;
            if (gDsUFDestino = 'SC') and ((gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3)) then begin
              vPrIVA := 11.334;
            end;
          end else if (vCdDecreto = 10203) then begin
            if (gDsUFOrigem = gDsUFDestino) then begin
              vPrIVA := 41.34  ;
              if (gDsUFDestino = 'SC') and ((gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3)) then begin
                vPrIVA := 12.402  ;
              end;
            end else begin
              vPrIVA := 49.86  ;
              if (gDsUFDestino = 'SC') and ((gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3)) then begin
                vPrIVA := 14.958;
              end;
            end;
          end;
          vInDecreto := True;
        end;
      end;
    end;

    if (vInDecreto = True) then begin
      tFIS_ALIQUOTAICMSUF.Limpar();
      tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
      tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
      tFIS_ALIQUOTAICMSUF.Consultar();
      if (xStatus < 0) then begin
        Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
        return(-1); exit;
      end;
      vVlAliquotaInter :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';

      viParams := '';
      viParams. 'CD_PRODUTO'  :=   tPRD_PRODUTO.'CD_PRODUTO';
      viParams. 'UF_ORIGEM'   :=  gDsUFOrigem;
      viParams. 'UF_DESTINO'  :=  gDsUFDestino;
      viParams. 'TP_OPERACAO' :=  vTpOperacao;
      voParams := 'FISSVCO035'.{mtp}( viParams);
      if (xStatus < 0) then begin
        Result := voParams;
        return(-1); exit;
      end;
      vVlAliquotaIntra :=  voParams.'PR_ICMS';

      if (vVlAliquotaIntra = 0) then begin
        tFIS_ALIQUOTAICMSUF.Limpar();
        tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF.Consultar();
        if (xStatus < 0) then begin
          Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFDestino + ' para ' + gDsUFDestino + '!', cDS_METHOD);
          return(-1); exit;
        end;
        vVlAliquotaIntra :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
      end;
      if (gDsUFDestino <> gDsUFOrigem) then begin
        vPrIVA := ((1 + (vPrIVA/100)) * ((1 - (vVlAliquotaInter/100)) / (1 - (vVlAliquotaIntra/100))) -1) * 100;
      end;
      if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) then begin
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
      end else begin
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
      end;
      vVlCalc := gVlTotalLiquidoICMS + gVlIPI + ((gVlTotalLiquidoICMS + gVlIPI) * vPrIVA) / 100;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * (item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100);
      vVlICMS := rounded(vVlCalc, 6) ;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  vVlICMS - gVlICMS;
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 45471) then begin // Decreto do Estado do Rio Grande do Sul
    if (gDsUFOrigem = 'RS') or (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SC') then begin
      if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4)then begin // 4 - Venda/Compra
        if (gDsUFDestino = 'PR') or (gDsUFDestino = 'RS')  or (gDsUFDestino = 'SC') then begin
          vPrIVA := 65.86;
          vInDecreto := True;
        end;
      end;
    end;

    if (vInDecreto = True) then begin
      tFIS_ALIQUOTAICMSUF.Limpar();
      tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
      tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
      tFIS_ALIQUOTAICMSUF.Consultar();
      if (xStatus < 0) then begin
        Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
        return(-1); exit;
      end;
      vVlCalc := gVlTotalLiquidoICMS + gVlIPI + ((gVlTotalLiquidoICMS + gVlIPI) * vPrIVA) / 100 ;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * (item_f('PR_ALIQICMS', tFIS_ALIQUOTAICMSUF) / 100);
      vVlICMS := rounded(vVlCalc, 6) ;
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  vVlICMS - gVlICMS;
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 52364)then begin // Decreto do Estado de São Paulo
    if (gDsUFOrigem = 'SP') or (gDsUFDestino = 'SP') then begin
      if (( tGER_OPERACAO.'TP_OPERACAO' = 'E') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4))
      or (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and ( tGER_OPERACAO.'TP_MODALIDADE' = 3)) then begin // 4 - Compra / 3 - Devolução
        // Aliquota aplicada pelo Fornecedor
        tFIS_ALIQUOTAICMSUF.Limpar();
        tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
        tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF.Consultar();
        if (xStatus < 0) then begin
          Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
          return(-1); exit;
        end;

        // Aliquota interna de SP
        if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) then begin
          vVlAliquotaIntra :=  tFIS_REGRAFISCAL.'PR_ALIQICMS' ;
        end else begin 
          vVlAliquotaIntra :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
        end;
        vVlAliquotaInter :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS'; // Aliquota aplicada pelo Fornecedor

        if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 12) or ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 18) then begin
          if (gDsUFOrigem = 'SP') and (gDsUFDestino = 'SP') then begin
            vPrIVA := 38.90 ;
          end else begin 
            vPrIVA := ((1 + (38.90/100)) * ((1 - (vVlAliquotaInter/100)) / (1 - (vVlAliquotaIntra/100))) -1) * 100;
          end;
          vInDecreto := True;
        end else if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 25) then begin
          if (gDsUFOrigem = 'SP') and (gDsUFDestino = 'SP') then begin
            vPrIVA := 71.60 ;
          end else begin 
            vPrIVA := ((1 + (71.60/100)) * ((1 - (vVlAliquotaInter/100)) / (1 - (vVlAliquotaIntra/100))) -1) * 100;
          end;
          vInDecreto := True;
        end;
      end;
    end;

    if (vInDecreto = True) then begin
      vVlCalc := gVlTotalLiquidoICMS + gVlIPI + ((gVlTotalLiquidoICMS + gVlIPI) * vPrIVA) / 100 ;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * (vVlAliquotaIntra / 100);
      vVlICMS := rounded(vVlCalc, 6) ;
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  vVlAliquotaIntra;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  (gVlTotalLiquidoICMS + gVlIPI) * (1 + (vPrIVA / 100)) * (vVlAliquotaIntra/100) - gVlICMS;
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 23731) or (vCdDecreto = 23732) or (vCdDecreto = 23733) or (vCdDecreto = 23734) or (vCdDecreto = 23735)then begin // Decreto do Estado do Paraná
    if (gDsUFOrigem = 'PR') or (gDsUFDestino = 'PR') then begin
      if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
        if (vCdDecreto = 23731) then begin
          vPrIVA := 59.26;
          vInDecreto := True;
        end else if (vCdDecreto = 23732) then begin
          vPrIVA := 37.78;
          vInDecreto := True;
        end else if (vCdDecreto = 23733) then begin
          if (gDsUFOrigem = gDsUFDestino) then begin
            vPrIVA := 41.34;
          end else begin
            vPrIVA := 49.86;
          end;
          vInDecreto := True;
        end else if (vCdDecreto = 23734) then begin
          if (gDsUFOrigem = gDsUFDestino) then begin
            vPrIVA := 33.05;
          end else begin 
            vPrIVA := 41.06;
          end;
          vInDecreto := True;
        end else if (vCdDecreto = 23735) then begin
          if (gDsUFOrigem = gDsUFDestino) then begin
            vPrIVA := 38.24;
          end else begin
            vPrIVA := 46.56;
          end;
          vInDecreto := True;
        end;
      end;
    end;

    if (vInDecreto = True) then begin
      if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) and (gDsUFOrigem = 'PR') and (gDsUFDestino = 'PR') then begin
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQICMS';
      end else begin
        tFIS_ALIQUOTAICMSUF.Limpar();
        tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF.Consultar();
        if (xStatus < 0) then begin
          Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
          return(-1); exit;
        end;
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
      end;

      if ( tFIS_REGRAFISCAL.'PR_REDUBASE' <> 0) then begin
        vVlCalc := (gVlTotalLiquido + gVlIPI) - ((gVlTotalLiquido + gVlIPI) *  tFIS_REGRAFISCAL.'PR_REDUBASE') / 100;
      end else begin
        vVlCalc := gVlTotalLiquido + gVlIPI;
      end;
      vVlBaseCalc := vVlCalc + (vVlCalc * vPrIVA) / 100 ;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlBaseCalc, 6);
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * (item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100);
      vVlICMS := rounded(vVlCalc, 6) ;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  vVlICMS - gVlICMS;
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 2559)then begin // Decreto do Paraná
    if (gDsUFOrigem = 'PR') or (gDsUFDestino = 'PR') then begin
      if ( tGER_OPERACAO.'TP_MODALIDADE' = 4)then begin // Venda/Compra
        if ( tGER_OPERACAO.'TP_OPERACAO' = 'E') then begin
          // Aliquota interna de PR
          tFIS_ALIQUOTAICMSUF.Limpar();
          tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
          tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
          tFIS_ALIQUOTAICMSUF.Consultar();
          if (xStatus < 0) then begin
            Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
            return(-1); exit;
          end;
        end else begin
          // Aliquota interna de PR
          tFIS_ALIQUOTAICMSUF.Limpar();
          tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
          tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFOrigem;
          tFIS_ALIQUOTAICMSUF.Consultar();
          if (xStatus < 0) then begin
            Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
            return(-1); exit;
          end;
        end;

        // Aliquota interna de PR
        if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) then begin
          vVlAliquotaIntra :=  tFIS_REGRAFISCAL.'PR_ALIQICMS';
        end else begin
          vVlAliquotaIntra :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
        end;
        vVlAliquotaInter :=  tFIS_IMPOSTO.'PR_ALIQUOTA'; // Aliquota aplicada pelo Fornecedor
        if (gInProdPropria = True) then begin
          vCdCFOP :=  tFIS_REGRAFISCAL.'CD_CFOPPROPRIA';
        end else begin
          vCdCFOP :=  tFIS_REGRAFISCAL.'CD_CFOPTERCEIRO';
        end;
        vCdCFOP := StrToFloat(Copy(FloatToStr(vCdCFOP),2,4));
        if (vCdCFOP = 407) then begin
          vPrIVA := abs(vVlAliquotaInter - vVlAliquotaIntra);
        end else begin
          if (gDsUFOrigem = 'PR') and (gDsUFDestino = 'PR') then begin
            vPrIVA := 40;
          end else begin
            vPrIVA := ((1 + (40/100)) * ((1 - (vVlAliquotaInter/100)) / (1 - (vVlAliquotaIntra/100))) -1) * 100;
          end;
        end;
        vInDecreto := True;
      end;
    end;

    if (vInDecreto = True) then begin
      vVlCalc := gVlTotalLiquidoICMS + gVlIPI + ((gVlTotalLiquidoICMS + gVlIPI) * vPrIVA) / 100 ;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * (vVlAliquotaInter / 100);
      vVlICMS := rounded(vVlCalc, 6) ;
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  vVlAliquotaInter;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  (gVlTotalLiquidoICMS + gVlIPI) * (1 + (vPrIVA / 100)) * (vVlAliquotaInter/100) - gVlICMS;
      gCdDecreto := vCdDecreto;
    end;
  end else if (vCdDecreto = 52804)then begin // Decreto do Estado de São Paulo
    if (gDsUFOrigem = 'SP') or (gDsUFDestino = 'SP') then begin
      if ( tGER_OPERACAO.'TP_MODALIDADE' = 4)then begin // Compra/Venda
        if ( tGER_OPERACAO.'TP_OPERACAO' = 'E') then begin
          // Aliquota interna de SP
          tFIS_ALIQUOTAICMSUF.Limpar();
          tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
          tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
          tFIS_ALIQUOTAICMSUF.Consultar();
          if (xStatus < 0) then begin
            Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
            return(-1); exit;
          end;
        end else begin
          // Aliquota interna de SP
          tFIS_ALIQUOTAICMSUF.Limpar();
          tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
          tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFOrigem;
          tFIS_ALIQUOTAICMSUF.Consultar();
          if (xStatus < 0) then begin
            Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
            return(-1); exit;
          end;
        end;

        // Aliquota interna de SP
        if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) then begin
          vVlAliquotaIntra :=  tFIS_REGRAFISCAL.'PR_ALIQICMS' ;
        end else begin 
          vVlAliquotaIntra :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
        end;
        vVlAliquotaInter :=  tFIS_IMPOSTO.'PR_ALIQUOTA' ; // Aliquota aplicada pelo Fornecedor
        if (gDsUFOrigem = 'SP') and (gDsUFDestino = 'SP') then begin
          vPrIVA := 17.32;
        end else begin
          vPrIVA := ((1 + (17.32/100)) * ((1 - (vVlAliquotaInter/100)) / (1 - (vVlAliquotaIntra/100))) -1) * 100;
        end;
        vInDecreto := True;
      end;
    end;

    if (vInDecreto = True) then begin
      vVlCalc := gVlTotalLiquidoICMS + gVlIPI + ((gVlTotalLiquidoICMS + gVlIPI) * vPrIVA) / 100 ;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * (vVlAliquotaIntra / 100);
      vVlICMS := rounded(vVlCalc, 6) ;
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  vVlAliquotaInter;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  (gVlTotalLiquidoICMS + gVlIPI) * (1 + (vPrIVA / 100)) * (vVlAliquotaInter/100) - gVlICMS;
      gCdDecreto := vCdDecreto;
    end;
  // Decreto do Espirito Santo
  end else if (vCdDecreto = 10901) or (vCdDecreto = 10902) or (vCdDecreto = 10903) or (vCdDecreto = 10904) then begin // Decreto do Espirito Santo
    if (gDsUFOrigem = 'ES') or (gDsUFDestino = 'ES') then begin
      if (gInContribuinte = True)
      and (( tGER_OPERACAO.'TP_MODALIDADE' = 4) or ( tGER_OPERACAO.'TP_MODALIDADE' = 3)) then begin // 4 - Venda/Compra / 3 - Devolucao
        if (vCdDecreto = 10901) then begin
          vPrIVA := 42;
          vInDecreto := True;
        end else if (vCdDecreto = 10902) then begin
          vPrIVA := 32;
          vInDecreto := True;
        end else if (vCdDecreto = 10903) then begin
          vPrIVA := 60;
          vInDecreto := True;
        end else if (vCdDecreto = 10904) then begin
          vPrIVA := 45;
          vInDecreto := True;
        end;
      end;
    end;

    if (vInDecreto = True) then begin
      // Aliquota aplicada no destino
      tFIS_ALIQUOTAICMSUF.Limpar();
      tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
      tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
      tFIS_ALIQUOTAICMSUF.Consultar();
      if (xStatus < 0) then begin
        Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
        return(-1); exit;
      end;
      // Aliquota interna do destino
      if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) then begin
        vVlAliquotaIntra :=  tFIS_REGRAFISCAL.'PR_ALIQICMS' ;
      end else begin
        vVlAliquotaIntra :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
      end;
      vVlCalc := gVlTotalLiquidoICMS + gVlIPI + ((gVlTotalLiquidoICMS + gVlIPI) * vPrIVA) / 100 ;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * (vVlAliquotaIntra / 100);
      vVlICMS := rounded(vVlCalc, 6) ;
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  vVlAliquotaIntra;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  (gVlTotalLiquidoICMS + gVlIPI) * (1 + (vPrIVA / 100)) * (vVlAliquotaIntra/100) - gVlICMS;
      gCdDecreto := vCdDecreto;
      if (gDsUFOrigem = 'ES') and (gDsUFDestino = 'ES') then begin
        vCdCST := '10';
      end else begin
        vCdCST := '70';
      end;
    end;
  end else begin
    vTpOperacao :=  tGER_OPERACAO.'TP_OPERACAO';

    viParams := '';
    viParams. 'CD_PRODUTO' :=   tPRD_PRODUTO.'CD_PRODUTO';
    viParams. 'UF_ORIGEM' :=  gDsUFOrigem;
    viParams. 'UF_DESTINO' :=  gDsUFDestino;
    viParams. 'TP_OPERACAO' :=  vTpOperacao;
    voParams := 'FISSVCO035'.{mtp}( viParams);
    if (xStatus < 0) then begin
      Result := voParams;
      return(-1); exit;
    end;  
    vPrIvaPrd :=  voParams.'PR_SUBSTRIB';
    vPrICMS :=  voParams.'PR_ICMS';

    if (vPrIvaPrd > 0) then begin
      vPrIVA := vPrIvaPrd;
    end;

    if (vPrICMS > 0)  then begin
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  vPrICMS;
    end;
    if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada na Tabela de Sub.Trib.do NCM de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
      return(-1); exit;
    end;
    vInCalcula := False;
    if (gDsUFOrigem <> gDsUFDestino) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4)then begin // Venda/Compra
      if ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin
        if (gInContribuinte = True) and ( tPES_CLIENTE.'IN_CNSRFINAL' = True) then begin
          vInCalcula := True;
        end;
      end else begin
        if (gInProdPropria = True) then begin
          vCdCFOP :=  tFIS_REGRAFISCAL.'CD_CFOPPROPRIA';
        end else begin
          vCdCFOP :=  tFIS_REGRAFISCAL.'CD_CFOPTERCEIRO';
        end;
        vCdCFOP := StrToFloat(Copy(FloatToStr(vCdCFOP),2,4));

        if (vCdCFOP = 407) then begin
          vInCalcula := True;
        end;
      end;

      if (vInCalcula = True) then begin
        // Aliquota interna destino
        tFIS_ALIQUOTAICMSUF.Limpar();
        tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF.Consultar();
        if (xStatus < 0) then begin
          Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
          return(-1); exit;
        end;
        vVlAliquotaDestino :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';

        // Aliquota interna origem
        tFIS_ALIQUOTAICMSUF.Limpar();
        tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
        tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFOrigem;
        tFIS_ALIQUOTAICMSUF.Consultar();
        if (xStatus < 0) then begin
          Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
          return(-1); exit;
        end;
        vVlAliquotaOrigem :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';

        //Se tiver aliquota na regra fiscal será passado para AliquotaOrigem
        if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) then begin
          vVlAliquotaOrigem :=  tFIS_REGRAFISCAL.'PR_ALIQICMS' ;
        end;

        vPrIVA := 0;
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  abs(vVlAliquotaOrigem - vVlAliquotaDestino);

      end else begin

        tFIS_ALIQUOTAICMSUF.Limpar();
        tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
        tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
        tFIS_ALIQUOTAICMSUF.Consultar();
        if (xStatus < 0) then begin
          Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
          return(-1); exit;
        end;
        vVlAliquotaInter :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';

        viParams := '';
        viParams. 'CD_PRODUTO'  :=   tPRD_PRODUTO.'CD_PRODUTO';
        viParams. 'UF_ORIGEM'   :=  gDsUFOrigem;
        viParams. 'UF_DESTINO'  :=  gDsUFDestino;
        viParams. 'TP_OPERACAO' :=  vTpOperacao;
        voParams := 'FISSVCO035'.{mtp}( viParams);
        if (xStatus < 0) then begin
          Result := voParams;
          exit
        end;
        vVlAliquotaIntra :=  voParams.'PR_ICMS';

        if (vVlAliquotaIntra = 0) then begin
          tFIS_ALIQUOTAICMSUF.Limpar();
          tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFDestino;
          tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
          tFIS_ALIQUOTAICMSUF.Consultar();
          if (xStatus < 0) then begin
            Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
            return(-1); exit;
          end;
          vVlAliquotaIntra :=  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS';
        end;

        if (gDsUFDestino <> gDsUFOrigem) then begin
           vPrIVA := ((1 + (vPrIVA/100)) * ((1 - (vVlAliquotaInter/100)) / (1 - (vVlAliquotaIntra/100))) -1) * 100;
        end;
      end;
    end;
    if (gPrAplicMvaSubTrib <> 0) then begin
      if ( (vTpOperacao = 'S') and ((gDsUFDestino = 'SC') and (gInContribuinte = True) and ((gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3))) )
      or ( (vTpOperacao = 'E') and (( tGER_OPERACAO.'TP_MODALIDADE' = 3) and ((gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3))) ) // 2-Micro Empresa / 3-EPP
      or ( (vTpOperacao = 'E') and (gInOptSimples = True) ) then begin
        if (vPrIVA = 0) then begin
          vPrIva := vPrIvaPrd;
        end;
        vPrIVA := (vPrIVA * gPrAplicMvaSubTrib)/100;
      end;
    end;
    if (vCdCST = '10') then begin
      vVlCalc := (gVlTotalLiquidoICMS + gVlIPI) + ((gVlTotalLiquidoICMS + gVlIPI) * vPrIVA) / 100;
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlCalc, 6);
      tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
    end else if (vCdCST = '70') then begin //Implementado por Deusdete em caráter de urgência em 28/04/2009, lógica revisada c/ Eliã
      vVlCalc := gVlTotalLiquidoICMS + gVlIPI;
      if (gNaturezaComercialEmp <> 3) and (gNaturezaComercialEmp <> 2) then begin //Varejo e Atacado (p/ atender o Lojão e Brascol)
        if ( tFIS_REGRAFISCAL.'PR_REDUBASE' <> 0) then begin
          if (vTpOperacao = 'S') then begin
            vVlCalc := vVlCalc - ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_REGRAFISCAL.'PR_REDUBASE') / 100;
            tFIS_IMPOSTO. 'PR_BASECALC' :=  100 -  tFIS_REGRAFISCAL.'PR_REDUBASE';
            tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
          end else if (vTpOperacao = 'E') then begin
            if (gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3) then begin
              vVlCalc := vVlCalc - ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_REGRAFISCAL.'PR_REDUBASE') / 100;
              tFIS_IMPOSTO. 'PR_BASECALC' :=  100 -  tFIS_REGRAFISCAL.'PR_REDUBASE';
              tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
            end;
          end;
        end;
      end;
      vVlBaseCalc := vVlCalc + ((vVlCalc * vPrIVA) / 100);
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlBaseCalc, 6);
      if ( tFIS_IMPOSTO.'PR_REDUBASE' = 0) then begin
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      end;
    end else if (vCdCST = '30') then begin
      vVlCalc := gVlTotalLiquidoICMS + gVlIPI;
      if (gInOptSimples = True) then begin
        if (gNaturezaComercialEmp <> 3) and (gNaturezaComercialEmp <> 2) then begin //Varejo e Atacado (p/ atender o Lojão e Brascol)
          if ( tFIS_REGRAFISCAL.'PR_REDUBASE' <> 0) then begin
            if (vTpOperacao = 'S') then begin
              vVlCalc := vVlCalc - ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_REGRAFISCAL.'PR_REDUBASE') / 100;
              tFIS_IMPOSTO. 'PR_BASECALC' :=  100 -  tFIS_REGRAFISCAL.'PR_REDUBASE';
              tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
            end else if (vTpOperacao = 'E') then begin
              if (gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3) then begin
                vVlCalc := vVlCalc - ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_REGRAFISCAL.'PR_REDUBASE') / 100;
                tFIS_IMPOSTO. 'PR_BASECALC' :=  100 -  tFIS_REGRAFISCAL.'PR_REDUBASE';
                tFIS_IMPOSTO. 'PR_REDUBASE' :=   tFIS_REGRAFISCAL.'PR_REDUBASE';
              end;
            end;
          end;
        end;
      end;
      vVlBaseCalc := vVlCalc + ((vVlCalc * vPrIVA) / 100 );
      tFIS_IMPOSTO. 'VL_BASECALC' :=  rounded(vVlBaseCalc, 6);
      if ( tFIS_IMPOSTO.'PR_REDUBASE' = 0) then begin
        tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
      end;
    end else begin
      tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS;
    end;

    if (vInCalcula = True)  then begin
      vVlCalc := ( tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO)) / 100;
      vVlCalc := rounded(vVlCalc, 6);
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  vVlCalc;
    end else begin
      if ( tFIS_IMPOSTO.'VL_BASECALC' > 0) then begin
        if (gInOptSimples = True) or ((gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3)
        and (( tGER_OPERACAO.'TP_OPERACAO' = 'E')
        or ((( tGER_OPERACAO.'TP_MODALIDADE' = 3) and ( tGER_OPERACAO.'TP_OPERACAO' = 'S') )))) then begin //2-Simples 3-EPP / Entrada ou Devolucao de compra
          if ( tFIS_IMPOSTO.'PR_ALIQUOTA' <> 0) then begin
            vVlCalc := ( tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO)) / 100;
            vVlICMS := rounded(vVlCalc, 6)    ;
            if (vCdCST = '30') or (vCdCST = '70') then begin
              if (gInOptSimples = True) then begin
                if ( tGER_OPERACAO.'TP_OPERACAO' = 'E') then begin
                  if (gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3) then begin
                    if ( tFIS_REGRAFISCAL.'PR_REDUBASE' <> 0) then begin
                      gVlTotalLiquidoICMS := (gVlTotalLiquidoICMS + gVlIPI) - ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_REGRAFISCAL.'PR_REDUBASE') / 100;
                    end;
                  end;
                end else if ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin
                  if ( tFIS_REGRAFISCAL.'PR_REDUBASE' <> 0) then begin
                    gVlTotalLiquidoICMS := (gVlTotalLiquidoICMS + gVlIPI) - ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_REGRAFISCAL.'PR_REDUBASE') / 100;
                  end;
                end;
              end else if (gInOptSimples = False) and (vCdCST = '70') then begin
                if (gTpRegimeOrigem = 2) or (gTpRegimeOrigem = 3) then begin
                  if ( tFIS_REGRAFISCAL.'PR_REDUBASE' <> 0) then begin
                    gVlTotalLiquidoICMS := (gVlTotalLiquidoICMS + gVlIPI) - ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_REGRAFISCAL.'PR_REDUBASE') / 100;
                  end;
                end;
              end;
            end;

            if (gDsUFOrigem = gDsUFDestino) then begin
              if ( tFIS_REGRAFISCAL.'PR_ALIQICMS' > 0) then begin
                vVlCalc := ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_REGRAFISCAL.'PR_ALIQICMS') / 100;
              end else begin 
                tFIS_ALIQUOTAICMSUF.Limpar();
                tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
                tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
                tFIS_ALIQUOTAICMSUF.Consultar();
                if (xStatus < 0) then begin
                  Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
                  return(-1); exit;
                end;
                vVlCalc := ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS') / 100;
              end;
            end else begin
              tFIS_ALIQUOTAICMSUF.Limpar();
              tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
              tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
              tFIS_ALIQUOTAICMSUF.Consultar();
              if (xStatus < 0) then begin
                Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastrada de ' + gDsUFOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
                return(-1); exit;
              end;
              vVlCalc := ((gVlTotalLiquidoICMS + gVlIPI) *  tFIS_ALIQUOTAICMSUF.'PR_ALIQICMS') / 100;
            end;
            vVlCalc := rounded(vVlCalc, 6);
            tFIS_IMPOSTO. 'VL_IMPOSTO' :=  vVlICMS - vVlCalc;
          end;
        end else begin
          vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
          vVlICMS := rounded(vVlCalc, 6) ;
          tFIS_IMPOSTO. 'VL_IMPOSTO' :=  vVlICMS - gVlICMS;
        end;
      end else begin
        tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
      end;
    end;
  end;

  if (vCdCST = '60') then begin
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
    tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquidoICMS;
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
    tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
    tFIS_IMPOSTO. 'PR_BASECALC' :=  0;
    tFIS_IMPOSTO. 'PR_REDUBASE' :=  0;
  end;

  gCdCST := Copy(gCdCST,1,1) + vCdCST;
  return(0);
end;

//----------------------
function T_FISSVCO015.calculaIPI(pParams : String) : String;
//----------------------
var
  vVlCalc, vVlBaseCalc, vCdDecreto : Real;
  vInDecreto : Boolean;
  vDtIniVigencia, vDtFimVigencia, vDtSistema : TDateTime;
begin
  if (gTpOrigemEmissao = 1) then begin //Própria
    if ( tFIS_REGRAFISCAL.'IN_IPI' <> True) then begin
      tFIS_IMPOSTO.Remover();
      return(-1); exit;
    end;
  end else begin
    if (gPrIPI = 0) or (gVlIPI = 0)  then begin
      if ( tFIS_REGRAFISCAL.'IN_IPI' <> True) then begin
        tFIS_IMPOSTO.Remover();
        return(-1); exit;
      end;
    end;
  end;

  gCdDecreto := 0;
  vCdDecreto := 0;
  vInDecreto := False;
  vDtSistema :=  PARAM_GLB.'DT_SISTEMA';
  
  if (gCdDecretoItemCapa <> 0) then begin
    tFIS_DECRETO.Limpar();
    tFIS_DECRETO. 'CD_DECRETO' :=  gCdDecretoItemCapa;
    tFIS_DECRETO.Consultar();
    if (xStatus >= 0) then begin
      vCdDecreto :=  tFIS_DECRETO.'CD_DECRETO';
      vDtIniVigencia :=  tFIS_DECRETO.'DT_INIVIGENCIA';
      vDtFimVigencia :=  tFIS_DECRETO.'DT_FIMVIGENCIA';
    end;
  end else begin
    if ( tFIS_DECRETO.'CD_DECRETO' > 0) then begin
      vCdDecreto :=  tFIS_DECRETO.'CD_DECRETO';
      vDtIniVigencia :=  tFIS_DECRETO.'DT_INIVIGENCIA';
      vDtFimVigencia :=  tFIS_DECRETO.'DT_FIMVIGENCIA';
    end;
  end;

  if (vCdDecreto > 0) then begin
    if (vDtIniVigencia <> 0) and (vDtSistema < vDtIniVigencia) then begin
      vCdDecreto := 0;
    end;
    if (vDtFimVigencia <> 0) and (vDtSistema > vDtFimVigencia) then begin
      vCdDecreto := 0;
    end;
  end;
  tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
  tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalBruto;
  if (gTpOrigemEmissao = 1) then begin //Própria
    if(gPrIPI <> 0) then begin
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  gPrIPI;
    end else begin
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_TIPI.'PR_IPI';
    end;
    vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 2);
  end else begin
    if (gVlIPI = 0) then begin
      if (gPrIPI <> 0) then begin
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  gPrIPI;
      end;
      vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 2);
    end else begin
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  gPrIPI;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  gVlIPI;
    end;
  end;
  if (vCdDecreto = 8248) then begin // Decreto para reduzir o valor do IPI em 95% para produto de informática
    if ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
      vInDecreto := True;
    end;

    if (vInDecreto = True) then begin
      vVlCalc :=  tFIS_IMPOSTO.'VL_IMPOSTO' * (1 - 0.95);
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 2);
      gCdDecreto := vCdDecreto;
    end;
  end;
  if (( tGER_OPERACAO.'TP_MODALIDADE' <> 3) or ( tGER_OPERACAO.'TP_OPERACAO' <> 'S')) then begin //Devolucao / Saida
    if ((gCdServico > 0) or ( tGER_OPERACAO.'TP_MODALIDADE' = 5) or ( tGER_OPERACAO.'TP_MODALIDADE' = 6) or ( tGER_OPERACAO.'TP_MODALIDADE' = 'F')) then begin // 5-Outras entradas/saidas / 6-Producao / F-Remessa/Retorno;
      if (gInCalcIpiOutEntSai <> True) then begin
        tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_BASECALC';
        tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
        tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
        tFIS_IMPOSTO. 'PR_BASECALC' :=  '';
      end;
    end else if ( tGER_OPERACAO.'TP_MODALIDADE' = 3) and ( tGER_OPERACAO.'TP_OPERACAO' = 'E') then begin // Devolução de Venda
      if (gDsUFDestino = 'AC') or (gDsUFDestino = 'AM') or (gDsUFDestino = 'RO') or (gDsUFDestino = 'RR') or (gDsUFOrigem = 'EX') or (gDsUFDestino = 'EX') then begin
        tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_BASECALC';
        tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
        tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
        tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
        tFIS_IMPOSTO. 'PR_BASECALC' :=  '';
      end;
    end else begin
      if (gNaturezaComercialEmp = 4) then begin // 4 - IPI suspenso
        if ( tFIS_IMPOSTO.'VL_IMPOSTO' = 0) then begin
          tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_BASECALC';
          tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
          tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
          tFIS_IMPOSTO. 'PR_BASECALC' :=  '';
        end;
      end else if ( tGER_OPERACAO.'TP_MODALIDADE' = 4) and ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin // 4 - Venda
        if (gDsUFDestino = 'EX') or (gDsUFDestino = 'AC') or (gDsUFDestino = 'AM') or (gDsUFDestino = 'RO') or (gDsUFDestino = 'RR') then begin
          tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_BASECALC';
          tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
          tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
          tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
          tFIS_IMPOSTO. 'PR_BASECALC' :=  '';
        end else if (gTpAreaComercioOrigem = 0) and (gTpAreaComercioDestino > 0) then begin
          tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_BASECALC';
          tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
          tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
          tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
          tFIS_IMPOSTO. 'PR_BASECALC' :=  '';
        end;
      end;
    end;
  end else begin
    if ( tFIS_IMPOSTO.'PR_ALIQUOTA' = 0) then begin
      tFIS_IMPOSTO. 'VL_OUTRO' :=   tFIS_IMPOSTO.'VL_BASECALC';
      tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
      tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
      tFIS_IMPOSTO. 'PR_ALIQUOTA' :=  0;
      tFIS_IMPOSTO. 'PR_BASECALC' :=  '';
    end;
  end;

  if (gInImpostoOffLine = True) then begin
    tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  0;
  end;

  gPrIPI :=  tFIS_IMPOSTO.'PR_ALIQUOTA';
  gVlIPI :=  tFIS_IMPOSTO.'VL_IMPOSTO';
  return(0);
end;

//----------------------
function T_FISSVCO015.calculaISS(pParams : String) : String;
//----------------------
var
  vVlCalc, vVlBaseCalc : Real;
  vCdCST : String;
begin
  if (gInImpostoOffLine = True) then begin
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;

  vCdCST := Copy(gCdCST,2,2);

  if (vCdCST = '40') or (vCdCST = '41') then begin
    tFIS_IMPOSTO. 'PR_BASECALC' :=  0;
    tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQISS';
    vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
    tFIS_IMPOSTO. 'VL_ISENTO' :=  gVlTotalLiquido;

  end else if (vCdCST = '90') then begin
    tFIS_IMPOSTO. 'PR_BASECALC' :=  0;
    tFIS_IMPOSTO. 'VL_BASECALC' :=  0;
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQISS';
    vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
    tFIS_IMPOSTO. 'VL_OUTRO' :=  gVlTotalLiquido;
  end else begin
    tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
    tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquido;
    tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQISS';
    vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
    tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
  end;
  return(0);
end;

//-------------------
function T_FISSVCO015.calculaCOFINS(pParams : String) : String;
//-------------------
var
  vVlCalc : Real;
  bStatus : Boolean;
begin
  if (gInImpostoOffLine = True) then begin
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;
  if ( tFIS_REGRAFISCAL.'IN_COFINS' <> True) then begin
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;

  tFIS_REGRAIMPOSTO.Limpar();
  tFIS_REGRAIMPOSTO. 'CD_IMPOSTO' :=   tFIS_IMPOSTO.'CD_IMPOSTO';
  tFIS_REGRAIMPOSTO. 'CD_REGRAFISCAL' :=   tFIS_REGRAFISCAL.'CD_REGRAFISCAL';
  tFIS_REGRAIMPOSTO.Consultar();
  if (xStatus < 0) then begin
    tFIS_IMPOSTO. 'CD_CST' :=   tFIS_REGRAIMPOSTO.'CD_CST';
  end;

  if (gTpAreaComercioOrigem = 0)
  and (((gTpAreaComercioDestino = 1) and (gInDescontaPisCofinsAlc = False)) or ((gTpAreaComercioDestino = 2) and (gInDescontaPisCofinsZfm = False))) then begin
    tFIS_REGRAFISCAL. 'PR_ALIQCOFINS' :=  0;
    tFIS_IMPOSTO. 'CD_CST' :=  '06';
  end;
  tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
  tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquido;
  if (gDsLstCfopIpiBcPisCof <> '') then begin
    tTMP_NR09, -1.Append();
    if (gInProdPropria = True) then begin
      tTMP_NR09. 'NR_GERAL' :=   tFIS_REGRAFISCAL.'CD_CFOPPROPRIA';
    end else begin
      tTMP_NR09. 'NR_GERAL' :=   tFIS_REGRAFISCAL.'CD_CFOPTERCEIRO';
    end;
    if (xStatus = 4) then begin
      tFIS_IMPOSTO. 'VL_BASECALC' :=   tFIS_IMPOSTO.'VL_BASECALC' + gVlIPI;
    end else begin
      tTMP_NR09.Remover();
    end;
  end;
  tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQCOFINS';
  vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
  tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
  return(0);
end;

//----------------------
function T_FISSVCO015.calculaPIS(pParams : String) : String;
//----------------------
var
  vVlCalc : Real;
  bStatus : Boolean;
begin
  if (gInImpostoOffLine = True) then begin
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;
  if ( tFIS_REGRAFISCAL.'IN_PIS' <> True) then begin
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;

  tFIS_REGRAIMPOSTO.Limpar();
  tFIS_REGRAIMPOSTO. 'CD_IMPOSTO' :=   tFIS_IMPOSTO.'CD_IMPOSTO';
  tFIS_REGRAIMPOSTO. 'CD_REGRAFISCAL' :=   tFIS_REGRAFISCAL.'CD_REGRAFISCAL';
  tFIS_REGRAIMPOSTO.Consultar();
  if (xStatus < 0) then begin
    tFIS_IMPOSTO. 'CD_CST' :=   tFIS_REGRAIMPOSTO.'CD_CST';
  end;

  if (gTpAreaComercioOrigem = 0)
  and (((gTpAreaComercioDestino = 1) and (gInDescontaPisCofinsAlc = False)) or ((gTpAreaComercioDestino = 2) and (gInDescontaPisCofinsZfm = False))) then begin
    tFIS_REGRAFISCAL. 'PR_ALIQPIS' :=  0;
    tFIS_IMPOSTO. 'CD_CST' :=  '06';
  end;
  tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
  tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquido;
  if (gDsLstCfopIpiBcPisCof <> '') then begin
    tTMP_NR09, -1.Append();
    if (gInProdPropria = True) then begin
      tTMP_NR09. 'NR_GERAL' :=   tFIS_REGRAFISCAL.'CD_CFOPPROPRIA';
    end else begin
      tTMP_NR09. 'NR_GERAL' :=   tFIS_REGRAFISCAL.'CD_CFOPTERCEIRO';
    end;
    if (xStatus = 4) then begin
      tFIS_IMPOSTO. 'VL_BASECALC' :=   tFIS_IMPOSTO.'VL_BASECALC' + gVlIPI;
    end else begin
      tTMP_NR09.Remover();
    end;
  end;
  tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQPIS';
  vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
  tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
  return(0);
end;

//----------------------
function T_FISSVCO015.calculaPASEP(pParams : String) : String;
//----------------------
var
  vVlCalc : Real;
begin
  if (gInImpostoOffLine = True) then begin
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;

  if ( tFIS_REGRAFISCAL.'IN_PASEP' <> True)
  or ( tFIS_REGRAFISCAL.'PR_ALIQPASEP' = 0) then begin
    tFIS_IMPOSTO.Remover();
    return(-1); exit;
  end;

  tFIS_IMPOSTO. 'PR_BASECALC' :=  100;
  tFIS_IMPOSTO. 'VL_BASECALC' :=  gVlTotalLiquido;
  tFIS_IMPOSTO. 'PR_ALIQUOTA' :=   tFIS_REGRAFISCAL.'PR_ALIQPASEP';
  vVlCalc :=  tFIS_IMPOSTO.'VL_BASECALC' * item_f('PR_ALIQUOTA', tFIS_IMPOSTO) / 100;
  tFIS_IMPOSTO. 'VL_IMPOSTO' :=  rounded(vVlCalc, 6);
  return(0);
end;

{ T_FISSVCO015 }

//-------------------------
function T_FISSVCO015.buscaCFOP(pParams : String) : String;
//-------------------------
const
  cDS_METHOD = 'ADICIONAL=Operação: T_FISSVCO015.buscaCFOP()';
var
  viParams, voParams, vDsLstEmpresa, vCdMPTer, vTpOperacao, vDsUF, vCdCSTOperacao, vCdCST : String;
  vCdEmpresa, vCdEmpresaParam, vCdProduto, vCdOperacao, vCdPessoa, vCdCFOPOperacao : Real;
  vCdRegraFiscal, vCdCFOP, vTpAreaComercio, vTpAreaComercioOrigem, vCdCFOPServico, vPrIvaPrd : Real;
  vInProdPropria, vInDecreto, vInOrgaoPublico : Boolean;
  vCdRegraFiscalParam : Real;
begin
  Result := '';

  if ( pParams.'UF_ORIGEM' <> '') then begin
    gDsUFOrigem :=  pParams.'UF_ORIGEM';
    gDsUFDestino :=  pParams.'UF_DESTINO';
  end else begin
    gDsUFOrigem :=  PARAM_GLB.'UF_ORIGEM';
    gDsUFDestino :=  pParams.'UF_DESTINO';
  end;
  vCdProduto :=  pParams.'CD_PRODUTO';
  vCdMPTer :=  pParams.'CD_MPTER';
  gCdServico :=  pParams.'CD_SERVICO';
  vCdOperacao :=  pParams.'CD_OPERACAO';
  vCdPessoa :=  pParams.'CD_PESSOA';
  vTpAreaComercio :=  pParams.'TP_AREACOMERCIO';
  vTpAreaComercioOrigem  :=  PARAM_GLB.'TP_AREA_COMERCIO_ORIGEM';
  vCdEmpresaParam :=  pParams.'CD_EMPRESA';
  if (vCdEmpresaParam = 0) then begin
    vCdEmpresaParam :=  PARAM_GLB.'CD_EMPRESA';
  end;
  gTpModDctoFiscal :=  pParams.'TP_MODDCTOFISCAL';
  gTpOrigemEmissao :=  pParams.'TP_ORIGEMEMISSAO'; //1 - Própria / 2 - Terceiros;
  vCdRegraFiscalParam :=  pParams.'CD_REGRAFISCAL';
  gInContribuinte :=  pParams.'IN_CONTRIBUINTE';
  vCdCFOP := 0;
  vInDecreto := False;
  gCdDecreto := 0;

  if (gDsUFDestino = '') then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'UF destino não informada!', cDS_METHOD);
    return(-1); exit;
  end;
  if (vCdOperacao = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Operação não informada!', cDS_METHOD);
    return(-1); exit;
  end;
  if (vCdPessoa = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Pessoa não informada!', cDS_METHOD);
    return(-1); exit;
  end;

  tGER_OPERACAO.Limpar();
  tGER_OPERACAO. 'CD_OPERACAO' :=  vCdOperacao;
  tGER_OPERACAO.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Operação ' + FloatToStr(vCdOperacao) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  if (vCdRegraFiscalParam > 0) then begin
    tGER_OPERACAO. 'CD_REGRAFISCAL' :=  vCdRegraFiscalParam;
  end;

  if (vCdProduto = 0)
  and (vCdMPTer = '')
  and (gCdServico = 0) then begin
    return(0); exit;
  end;

  if (vCdMPTer <> '') then begin
    tCDF_MPTER.Limpar();
    tCDF_MPTER. 'CD_PESSOA' :=  vCdPessoa;
    tCDF_MPTER. 'CD_MPTER' :=  vCdMPTer;
    tCDF_MPTER.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Matéria-prima ' + vCdMPTer + ' não cadastrada para a pessoa ' + FloatToStr(vCdPessoa) + '!', cDS_METHOD);
      return(-1); exit;
    end;
  end else begin
    tPRD_PRODUTO.Limpar();
    tPRD_PRODUTO. 'CD_PRODUTO' :=  vCdProduto;
    tPRD_PRODUTO.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Produto ' + FloatToStr(vCdProduto) + ' não cadastrado!', cDS_METHOD);
      return(-1); exit;
    end;
  end;

  tPES_PESSOA.Limpar();
  tPES_PESSOA. 'CD_PESSOA' :=  vCdPessoa;
  tPES_PESSOA.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Pessoa ' + FloatToStr(vCdPessoa) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  //Venda / Devolução de venda
  if (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and (item_a('TP_MODALIDADE', tGER_OPERACAO) = '4'))
  or (( tGER_OPERACAO.'TP_OPERACAO' = 'E') and (item_a('TP_MODALIDADE', tGER_OPERACAO) = '3')) then begin
    tPES_CLIENTE.Limpar();
    tPES_CLIENTE. 'CD_CLIENTE' :=  vCdPessoa;
    tPES_CLIENTE.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Cliente ' + FloatToStr(vCdPessoa) + ' não cadastrado!', cDS_METHOD);
      return(-1); exit;
    end;
  end;

  // Implementado por Deusdete em 22/03/2007, situação emergencial na Krindges;
  // Se for pessoa Jurídica e não tiver inscrição estadual, isto é, Isento, deverá ser tratado para fazer o cálculo do imposto
  // com a alíquota interna.;
  gInPjIsento := False;
  if ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTO')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTA')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTOS')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTAS') then begin
    if ( tPES_PESJURIDICA.'TP_REGIMETRIB' <> '6') then begin // MEI (Micro Empresário Individual)
      gInPjIsento := True;
    end;
  end;

  if (gTpOrigemEmissao = 2) then begin //Terceiros
    if ( tGER_OPERACAO.'TP_MODALIDADE' <> '3') then begin //Devolução
      vDsUF := gDsUFOrigem;
      gDsUFOrigem := gDsUFDestino;
      gDsUFDestino := vDsUF;
    end;
  end else begin
    if (( tGER_OPERACAO.'TP_MODALIDADE' = '3') and (item_a('TP_OPERACAO', tGER_OPERACAO) = 'S')) then begin //Devolução compra
      vDsUF := gDsUFOrigem;
      gDsUFOrigem := gDsUFDestino;
      gDsUFDestino := vDsUF;
    end;
  end;

  viParams := '';
  viParams. 'CD_PESSOA' :=  vCdPessoa;
  voParams := 'FCRSVCO057'.{mtp}( viParams);
  if (xStatus < 0) then begin
    Result := voParams;
    return(-1); exit;
  end;
  vInOrgaoPublico :=  voParams.'IN_ORGAOPUBLICO';

  if (vInOrgaoPublico = True) and (gDsUFOrigem = 'DF') then begin
    gInContribuinte := True;
  end else begin
    if ( tPES_CLIENTE.'IN_CNSRFINAL' = True) or ( tPES_PESSOA.'TP_PESSOA' = 'F') or (gInPjIsento = True) then begin
      if ( tPES_CLIENTE.'IN_CNSRFINAL' = True) and ( tPES_PESSOA.'TP_PESSOA' = 'J') and (gInPjIsento = False) then begin
        gInContribuinte := True;
      end else begin
        if ( tPES_PESSOA.'TP_PESSOA' = 'F')
        and ( tPES_CLIENTE.'NR_CODIGOFISCAL' <> '')
        and ((gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SP') or (gDsUFOrigem = 'RS')) then begin
          gInContribuinte := True;
        end else begin
          gInContribuinte := False;
        end;
      end;
    end else begin
      gInContribuinte := True;
    end;
  end;

  vCdRegraFiscal := 0;

  if (gCdServico > 0) then begin
    vInProdPropria := False;
    vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
    if (vCdRegraFiscal = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;
  end else if (vCdMPTer <> '') then begin
    vInProdPropria := False;
    vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
    if (vCdRegraFiscal = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;
  end else begin
    viParams := '';
    viParams. 'CD_EMPRESA' :=  vCdEmpresaParam;
    viParams. 'CD_PRODUTO' :=  vCdProduto;
    voParams := 'PRDSVCO007'.{mtp}( viParams); // PRDSVCO008
    if (xStatus < 0) then begin
      Result := voParams;
      return(-1); exit;
    end;
    vInProdPropria :=  voParams.'IN_PRODPROPRIA';

    tPRD_PRDREGRAFISCAL.Limpar();
    tPRD_PRDREGRAFISCAL. 'CD_PRODUTO' :=  vCdProduto;
    tPRD_PRDREGRAFISCAL. 'CD_OPERACAO' :=  vCdOperacao;
    tPRD_PRDREGRAFISCAL.Consultar();
    if (xStatus >= 0) then begin
      tFIS_REGRAFISCAL.Limpar();
      tFIS_REGRAFISCAL. 'CD_REGRAFISCAL' :=   tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL';
      tFIS_REGRAFISCAL.Consultar();
      if (xStatus < 0) then begin
        Result := SetStatus(STS_ERROR, 'GEN001', 'Regra fiscal ' +  tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL' + ' não cadastrada!', cDS_METHOD);
        return(-1); exit;
      end else begin
        if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 2155)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 1020)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 45471)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23731)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23732)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23733)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23734)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23735)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10201)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10202)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10203) then begin
          if (gInContribuinte = True) then begin
            vCdRegraFiscal :=  tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL';
          end else begin
            vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
          end;
        end else begin
          vCdRegraFiscal :=  tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL';
        end;
      end;
    end else begin
      vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
    end;

    if (vCdRegraFiscal = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ o produto ' + FloatToStr(vCdProduto) + ' e a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;
    vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
  end;

  if (vCdRegraFiscalParam > 0) then begin
    vCdRegraFiscal := vCdRegraFiscalParam;
  end;

  tFIS_REGRAFISCAL.Limpar();
  tFIS_REGRAFISCAL. 'CD_REGRAFISCAL' :=   tGER_OPERACAO.'CD_REGRAFISCAL';
  tFIS_REGRAFISCAL.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Regra fiscal ' +  tGER_OPERACAO.'CD_REGRAFISCAL' + '!', cDS_METHOD);
    return(-1); exit;
  end;
  if (vInProdPropria = True) then begin
    vCdCFOPOperacao :=  tFIS_REGRAFISCAL.'CD_CFOPPROPRIA';
  end else begin
    vCdCFOPOperacao :=  tFIS_REGRAFISCAL.'CD_CFOPTERCEIRO';
  end;
  vCdCSTOperacao := Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2);

  tFIS_REGRAFISCAL.Limpar();
  tFIS_REGRAFISCAL. 'CD_REGRAFISCAL' :=  vCdRegraFiscal;
  tFIS_REGRAFISCAL.Consultar();
  if ( tFIS_REGRAFISCAL.'CD_REGRAFISCAL' = '') then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Regra fiscal ' + FloatToStr(vCdRegraFiscal) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end else begin
    if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 2155) then begin
      if (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'RS') or (gDsUFOrigem = 'SC') then begin
        if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
          if (gDsUFDestino = 'PR') or (gDsUFDestino = 'RS') or (gDsUFDestino = 'SC') then begin
            if ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin // S - Saida
              if (vInProdPropria = True) then begin
                vCdCFOP := 5401;
              end else begin
                vCdCFOP := 5403;
              end;
            end else begin
              if (vInProdPropria = True) then begin
                vCdCFOP := 1401;
              end else begin
                vCdCFOP := 1403;
              end;
            end;
            vInDecreto := True;
          end;
        end;
      end;
    end else if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 1020)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10201)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10202)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10203) then begin
      if (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SC') or (gDsUFOrigem = 'MG') then begin
        if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
          if (gDsUFDestino = 'PR') or (gDsUFDestino = 'SC') or (gDsUFDestino = 'MG') then begin
            if ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin // S - Saida
              if (vInProdPropria = True) then begin
                vCdCFOP := 5401;
              end else begin
                vCdCFOP := 5403;
              end;
            end else begin
              if (vInProdPropria = True) then begin
                vCdCFOP := 1401;
              end else begin
                vCdCFOP := 1403;
              end;
            end;
            vInDecreto := True;
          end;
        end;
      end;
    end else if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 45471) then begin
      if (gDsUFOrigem = 'RS') or (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SC') then begin
        if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
          if (gDsUFDestino = 'PR') or (gDsUFDestino = 'RS') or (gDsUFDestino = 'SC') then begin
            if ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin // S - Saida
              if (vInProdPropria = True) then begin
                vCdCFOP := 5401;
              end else begin
                vCdCFOP := 5403;
              end;
            end else begin
              if (vInProdPropria = True) then begin
                vCdCFOP := 1401;
              end else begin
                vCdCFOP := 1403;
              end;
            end;
            vInDecreto := True;
          end;
        end;
      end;
    end else if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23731)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23732)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23733)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23734)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23735) then begin

      if (gDsUFOrigem = 'PR') or (gDsUFDestino = 'PR') then begin
        if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
          if ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin // S - Saida
            if (vInProdPropria = True) then begin
              vCdCFOP := 5401;
            end else begin
              vCdCFOP := 5403;
            end;
          end else begin
            if (vInProdPropria = True) then begin
              vCdCFOP := 1401;
            end else begin
              vCdCFOP := 1403;
            end;
          end;
          vInDecreto := True;
        end;
      end;
    end;
  end  ;

  if (vInDecreto = False) then begin
    if (vInProdPropria = True) then begin
      vCdCFOP :=  tFIS_REGRAFISCAL.'CD_CFOPPROPRIA';
    end else begin
      vCdCFOP :=  tFIS_REGRAFISCAL.'CD_CFOPTERCEIRO';
    end;

    if (vTpAreaComercio > 0) then begin
      if (vTpAreaComercio = 2) and (vTpAreaComercioOrigem = 2) then begin // 2 - Manaus
      end else begin
        if ( tGER_OPERACAO.'TP_OPERACAO' = 'S') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin //Venda
          vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
          if (vCdCST = '1') then begin
            if (vInProdPropria = True) then begin
              vCdCFOP := 5101;
            end else begin
              vCdCFOP := 5102;
            end;
          end else begin
            if (vInProdPropria = True) then begin
              vCdCFOP := 5109;
            end else begin
              vCdCFOP := 5110;
            end;
          end;
        end;
      end;
    end;
  end;

  if (gCdServico > 0) then begin
    viParams := '';
    viParams. 'CD_REGRAFISCAL' :=  vCdRegraFiscal;
    voParams := 'FISSVCO033'.{mtp}( viParams);
    if (xStatus < 0) then begin
      Result := voParams;
      return(-1); exit;
    end;

    vCdCFOPServico :=  voParams.'CD_CFOPSERVICO';
    if (vCdCFOPServico <> 0) then begin
      vCdCFOP := vCdCFOPServico;
    end;
  end else begin
    if (Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2) = '60')   then begin
      vCdCST := Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 1);
      if (gDsUFOrigem <> gDsUFDestino)  then begin
        if (gInContribuinte = True) then begin
          vCdCST := vCdCST + '10';
        end else begin
          vCdCST := vCdCST + FloatToStr(vCdCFOPOperacao);
          vCdCFOP := vCdCFOPOperacao;
        end;
      end else begin
        vCdCST := vCdCST + '60';
      end;
    end;

    if (vInDecreto = False) then begin // Só chamar este serviço se não tiver decreto na regra
      if (Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2) = '10') or (Copy(vCdCST,1,2) = '10') then begin
        vTpOperacao :=  tGER_OPERACAO.'TP_OPERACAO';

        viParams := '';
        viParams. 'CD_PRODUTO' :=   tPRD_PRODUTO.'CD_PRODUTO';
        viParams. 'UF_ORIGEM' :=  gDsUFOrigem;
        viParams. 'UF_DESTINO' :=  gDsUFDestino;
        viParams. 'TP_OPERACAO' :=  vTpOperacao;
        voParams := 'FISSVCO035'.{mtp}( viParams);
        if (xStatus < 0) then begin
          Result := voParams;
          return(-1); exit;
        end;
        vPrIvaPrd :=  voParams.'PR_SUBSTRIB';

        if (vPrIvaPrd = 0) then begin
          vCdCFOP := vCdCFOPOperacao;
        end;
      end;
    end;
  end;

  if ( tGER_OPERACAO.'TP_OPERACAO' = 'E') then begin //Entrada
    if (vCdCFOP >= 4000) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'CFOP ' + FloatToStr(vCdCFOP) + ' do produto ' + FloatToStr(vCdProduto) + ' incompatível com a operação de entrada ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;

    if (vCdCFOP < 3000) then begin //Somente CFOP nacionais
      if (gDsUFOrigem = gDsUFDestino) then begin
        if (vCdCFOP >= 2000) then begin
          vCdCFOP := vCdCFOP - 1000;
        end;
      end else begin
        if (vCdCFOP < 2000) then begin
          vCdCFOP := vCdCFOP + 1000;
        end;
      end;
    end;
  end else begin
    if (vCdCFOP < 5000) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'CFOP ' + FloatToStr(vCdCFOP) + ' do produto ' + FloatToStr(vCdProduto) + ' incompatível com a operação de saída ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;

    if (vCdCFOP < 7000) then begin //Somente CFOP nacionais
      if (gDsUFOrigem = gDsUFDestino) then begin
        if (vCdCFOP >= 6000) then begin
          vCdCFOP := vCdCFOP - 1000;
        end;
      end else if (gDsUFOrigem <> gDsUFDestino) and (gDsUFDestino <> 'EX') then begin
        if (vCdCFOP < 6000) then begin
          vCdCFOP := vCdCFOP + 1000;
        end;
      end;
    end;
  end;

  if (vCdCFOP = 6101) and (gInContribuinte = False) then begin
    vCdCFOP := 6107;
  end;

  if (vCdCFOP = 6102) and (gInContribuinte = False) then begin
    vCdCFOP := 6108;
  end  ;

  if (Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2) = '70') then begin
    if (gDsUFOrigem = 'GO') then begin
      if (gDsUFOrigem <> gDsUFDestino) or (vInProdPropria <> True) or (gInContribuinte <> True) then begin
        if (vCdCFOP = 5405) then begin          // Como a regra fiscal esta como a CFOP generica 06, pois toda venda p/
          if (vInProdPropria = True) then begin // não contribuinte deverá sair com o CFOP interno de venda
             vCdCFOP := 5101;
          end else begin
            vCdCFOP := 5102;
          end;
        end;
        if (vCdCFOP = 6401) then begin
          if (gInContribuinte = True) then begin
             vCdCFOP := 6101;
          end else begin
            vCdCFOP := 6107;
          end;
        end;
      end;
    end;
  end;

  if (Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2) = '60') then begin
    if (gDsUFOrigem = 'GO') then begin
      if (gDsUFOrigem <> gDsUFDestino) or (vInProdPropria <> True) then begin
        if (vCdCFOP = 6405) then begin
          vCdCFOP := 6404;
        end;
      end;
    end;
  end;

  if (vCdCFOP = 6405) then begin
    vCdCFOP := 6403;
  end;

  Result := '';
  Result. 'CD_CFOP' :=  vCdCFOP;
  return(0);
end;

//-------------------------
function T_FISSVCO015.buscaCST(pParams : String) : String;
//-------------------------
const
  cDS_METHOD = 'ADICIONAL=Operação: T_FISSVCO015.buscaCST()';
var
  viParams, voParams, vDsLstEmpresa, vCdCST, vCdMPTer, vTpOperacao, vCdCSTOperacao, vDsUF : String;
  vInProdPropria, vInDecreto, vInOrgaoPublico, vInPrReducao, vInOptSimples : Boolean;
  vCdEmpresa, vCdEmpresaParam, vCdProduto, vCdOperacao, vCdPessoa, vCdCFOP : Real;
  vCdRegraFiscal, vTpAreaComercio, vTpAreaComercioOrigem, vPrIvaPrd : Real;
  vCdRegraFiscalParam : Real;
begin
  Result := '';

  gDsUFOrigem :=  PARAM_GLB.'UF_ORIGEM';
  vInOptSimples :=  PARAM_GLB.'IN_OPT_SIMPLES';

  gDsUFDestino   :=  pParams.'UF_DESTINO';
  vCdProduto  :=  pParams.'CD_PRODUTO';
  vCdMPTer   :=  pParams.'CD_MPTER';
  gCdServico :=  pParams.'CD_SERVICO';
  vCdPessoa :=  pParams.'CD_PESSOA';
  vCdOperacao :=  pParams.'CD_OPERACAO';
  vTpAreaComercio :=  pParams.'TP_AREACOMERCIO';
  vTpAreaComercioOrigem  :=  PARAM_GLB.'TP_AREA_COMERCIO_ORIGEM';
  vCdCFOP :=  pParams.'CD_CFOP';
  vCdEmpresaParam  :=  pParams.'CD_EMPRESA';
  if (vCdEmpresaParam = 0) then begin
    vCdEmpresaParam :=  PARAM_GLB.'CD_EMPRESA';
  end;
  gTpModDctoFiscal :=  pParams.'TP_MODDCTOFISCAL';
  gTpOrigemEmissao :=  pParams.'TP_ORIGEMEMISSAO'; //1 - Própria / 2 - Terceiros
  vCdRegraFiscalParam :=  pParams.'CD_REGRAFISCAL';
  gInContribuinte := False;
  vInDecreto := False;

  if (vCdOperacao = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Operação não informada!', cDS_METHOD);
    return(-1); exit;
  end;
  if (vCdPessoa = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Pessoa não informada!', cDS_METHOD);
    return(-1); exit;
  end;

  tGER_OPERACAO.Limpar();
  tGER_OPERACAO. 'CD_OPERACAO' :=  vCdOperacao;
  tGER_OPERACAO.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Operação ' + FloatToStr(vCdOperacao) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  if (vCdProduto = 0)
  and (vCdMPTer = '')
  and (gCdServico = 0) then begin
    return(0); exit;
  end;

  if (vCdCFOP = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'CFOP não informada!', cDS_METHOD);
    return(-1); exit;
  end;

  if (vCdMPTer <> '') then begin
    tCDF_MPTER.Limpar();
    tCDF_MPTER. 'CD_PESSOA' :=  vCdPessoa;
    tCDF_MPTER. 'CD_MPTER' :=  vCdMPTer;
    tCDF_MPTER.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Matéria-prima ' + vCdMPTer + ' não cadastrada para a pessoa ' + FloatToStr(vCdPessoa) + '!', cDS_METHOD);
      return(-1); exit;
    end;
  end else begin
    tPRD_PRODUTO.Limpar();
    tPRD_PRODUTO. 'CD_PRODUTO' :=  vCdProduto;
    tPRD_PRODUTO.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Produto ' + FloatToStr(vCdProduto) + ' não cadastrado!', cDS_METHOD);
      return(-1); exit;
    end;
  end;

  tGER_OPERACAO.Limpar();
  tGER_OPERACAO. 'CD_OPERACAO' :=  vCdOperacao;
  tGER_OPERACAO.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Operação ' + FloatToStr(vCdOperacao) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  if (vCdRegraFiscalParam > 0) then begin
    tGER_OPERACAO. 'CD_REGRAFISCAL' :=  vCdRegraFiscalParam;
  end;

  tFIS_REGRAFISCAL.Limpar();
  tFIS_REGRAFISCAL. 'CD_REGRAFISCAL' :=   tGER_OPERACAO.'CD_REGRAFISCAL';
  tFIS_REGRAFISCAL.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Regra fiscal ' + FloatToStr(vCdRegraFiscal) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;
  vCdCSTOperacao := Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2);

  tPES_PESSOA.Limpar();
  tPES_PESSOA. 'CD_PESSOA' :=  vCdPessoa;
  tPES_PESSOA.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Pessoa ' + FloatToStr(vCdPessoa) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  tPES_PFADIC.Limpar();
  tPES_PFADIC. 'CD_PESSOA' :=  vCdPessoa;
  tPES_PFADIC.Consultar();
  if (xStatus < 0) then begin
    tPES_PFADIC.Limpar();
  end;

  if (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4))
  or (( tGER_OPERACAO.'TP_OPERACAO' = 'E') and ( tGER_OPERACAO.'TP_MODALIDADE' = 3)) then begin //Venda / Devolução de venda
    tPES_CLIENTE.Limpar();
    tPES_CLIENTE. 'CD_CLIENTE' :=  vCdPessoa;
    tPES_CLIENTE.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Cliente ' + FloatToStr(vCdPessoa) + ' não cadastrado!', cDS_METHOD);
      return(-1); exit;
    end;
  end;

  // Implementado por Deusdete em 22/03/2007, situação emergencial na Krindges;
  // Se for pessoa Jurídica e não tiver inscrição estadual, isto é, Isento, deverá ser tratado para fazer o cálculo do imposto then begin
  // com a alíquota interna.;
  gInPjIsento := False;
  if ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTO')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTA')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTOS')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTAS') then begin
    gInPjIsento := True;
  end;

  if (gTpOrigemEmissao = 2) then begin //Terceiros
    if ( tGER_OPERACAO.'TP_MODALIDADE' <> 3) then begin //Devolução
      vDsUF := gDsUFOrigem;
      gDsUFOrigem := gDsUFDestino;
      gDsUFDestino := vDsUF;
    end;
  end else begin
    if ( tGER_OPERACAO.'TP_MODALIDADE' = 3) and ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin //Devolução compra
      vDsUF := gDsUFOrigem;
      gDsUFOrigem := gDsUFDestino;
      gDsUFDestino := vDsUF;
    end;
  end;

  viParams := '';
  viParams. 'CD_PESSOA' :=  vCdPessoa;
  voParams := 'FCRSVCO057'.{mtp}( viParams);
  if (xStatus < 0) then begin
    Result := voParams;
    return(-1); exit;
  end;
  vInOrgaoPublico :=  voParams.'IN_ORGAOPUBLICO';

  if (vInOrgaoPublico = True) and (gDsUFOrigem = 'DF') then begin
    gInContribuinte := True;
  end else begin
    if ( tPES_CLIENTE.'IN_CNSRFINAL' = True) or ( tPES_PESSOA.'TP_PESSOA' = 'F') or (gInPjIsento = True) then begin
      if ( tPES_CLIENTE.'IN_CNSRFINAL' = True) and ( tPES_PESSOA.'TP_PESSOA' = 'J') and (gInPjIsento = False) then begin
        gInContribuinte := True;
      end else begin
        if ( tPES_PESSOA.'TP_PESSOA' = 'F')
        and ( tPES_CLIENTE.'NR_CODIGOFISCAL' <> '')
        and ((gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SP') or (gDsUFOrigem = 'RS')) then begin
          gInContribuinte := True;
        end else begin
          gInContribuinte := False;
        end;
      end;
    end else begin
      gInContribuinte := True;
    end;
  end;

  vCdRegraFiscal := 0;

  if (gCdServico > 0) then begin
    vInProdPropria := False;
    vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
    if (vCdRegraFiscal = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;
    vCdCST := '0';
  end else if (vCdMPTer <> '') then begin
    vInProdPropria := False;
    vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
    if (vCdRegraFiscal = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;
    vCdCST := Copy( tCDF_MPTER.'CD_CST', 1, 1);
  end else begin
    viParams := '';
    viParams. 'CD_EMPRESA' :=  vCdEmpresaParam;
    viParams. 'CD_PRODUTO' :=  vCdProduto;
    voParams := 'PRDSVCO007'.{mtp}( viParams);
    if (xStatus < 0) then begin
      Result := voParams;
      return(-1); exit;
    end;
    vInProdPropria :=  voParams.'IN_PRODPROPRIA';

    tPRD_PRDREGRAFISCAL.Limpar();
    tPRD_PRDREGRAFISCAL. 'CD_PRODUTO' :=  vCdProduto;
    tPRD_PRDREGRAFISCAL. 'CD_OPERACAO' :=  vCdOperacao;
    tPRD_PRDREGRAFISCAL.Consultar();
    if (xStatus >= 0) then begin
      tFIS_REGRAFISCAL.Limpar();
      tFIS_REGRAFISCAL. 'CD_REGRAFISCAL' :=   tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL';
      tFIS_REGRAFISCAL.Consultar();
      if (xStatus < 0) then begin
        Result := SetStatus(STS_ERROR, 'GEN001', 'Regra fiscal ' +  tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL' + ' não cadastrada!', cDS_METHOD);
        return(-1); exit;
      end else begin
        if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 2155)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 1020)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 45471)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23731)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23732)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23733)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23734)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23735)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10201)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10202)
        or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10203) then begin
          if (gInContribuinte = True) then begin
            vCdRegraFiscal :=  tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL';
          end else begin
            vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
          end;
        end else begin
          vCdRegraFiscal :=  tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL';
        end;
      end;
    end else begin
      vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
    end  ;

    if (vCdRegraFiscal = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ o produto ' + FloatToStr(vCdProduto) + ' e a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;

    vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
  end;

  if (vCdRegraFiscalParam > 0) then begin
    vCdRegraFiscal := vCdRegraFiscalParam;
  end;

  tFIS_REGRAFISCAL.Limpar();
  tFIS_REGRAFISCAL. 'CD_REGRAFISCAL' :=  vCdRegraFiscal;
  tFIS_REGRAFISCAL.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Regra fiscal ' + FloatToStr(vCdRegraFiscal) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end else begin
    if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 2155) then begin
      if (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'RS') or (gDsUFOrigem = 'SC') then begin
        if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
          if (gDsUFDestino = 'PR') or (gDsUFDestino = 'RS') or (gDsUFDestino = 'SC') then begin
            vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
            vCdCST := vCdCST + '10';
            vInDecreto := True;
          end;
        end;
      end;
    end else if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 1020)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10201)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10202)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 10203) then begin
      if (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SC') or (gDsUFOrigem = 'MG') then begin
        if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
          if (gDsUFDestino = 'PR') or (gDsUFDestino = 'SC') or (gDsUFDestino = 'MG') then begin
            vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
            vCdCST := vCdCST + '10';
            vInDecreto := True;
          end;
        end;
      end;
    end else if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 45471) then begin
      if (gDsUFOrigem = 'RS') or (gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SC') then begin
        if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
          if (gDsUFDestino = 'PR') or (gDsUFDestino = 'RS') or (gDsUFDestino = 'SC') then begin
            vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
            vCdCST := vCdCST + '10';
            vInDecreto := True;
          end;
        end;
      end;
    end else if ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23731)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23732)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23733)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23734)
             or ( tFIS_REGRAFISCAL.'CD_DECRETO' = 23735) then begin
      if (gDsUFOrigem = 'PR') or (gDsUFDestino = 'PR') then begin
        if (gInContribuinte = True) and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin // 4 - Venda/Compra
          vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
          vCdCST := vCdCST + '10';
          vInDecreto := True;
        end;
      end;
    end;
  end;

  if (vInDecreto = False) then begin
    vCdCST := vCdCST + Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2);
    if (vTpAreaComercio > 0) then begin
      if (vTpAreaComercio = 2) and (vTpAreaComercioOrigem = 2) then begin // 2 - Manaus
      end else begin
        if ( tGER_OPERACAO.'TP_OPERACAO' = 'S') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4) then begin //Venda
          vCdCST := Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 1);
          if (vCdCST = '1') or (vCdCST = '2') then begin // Produto inportado
            vCdCST := vCdCST + '00';
          end else begin
            vCdCST := vCdCST + '40';
          end;
        end;
      end;
    end;

    if (Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2) = '70') then begin
      if (gDsUFOrigem = 'GO') then begin
        if (gDsUFOrigem <> gDsUFDestino) or (vInProdPropria <> True) or (gInContribuinte <> True) then begin
          vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
          vCdCST := vCdCST + '00';
        end;
      end;
    end;

    if (Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2) = '60')   then begin
      vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
      if (gDsUFOrigem <> gDsUFDestino)  then begin
        if (gInContribuinte = True) then begin
          vCdCST := vCdCST + '10';
        end else begin
          vCdCST := vCdCST + vCdCSTOperacao;
        end;
      end else begin
        vCdCST := vCdCST + '60';
      end;
    end;

    if (Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2) = '10') or (Copy(vCdCST,2,2) = '10') then begin
      vTpOperacao :=  tGER_OPERACAO.'TP_OPERACAO';

      viParams := '';
      viParams. 'CD_PRODUTO' :=   tPRD_PRODUTO.'CD_PRODUTO';
      viParams. 'UF_ORIGEM' :=  gDsUFOrigem;
      viParams. 'UF_DESTINO' :=  gDsUFDestino;
      viParams. 'TP_OPERACAO' :=  vTpOperacao;
      voParams := 'FISSVCO035'.{mtp}( viParams);
      if (xStatus < 0) then begin
        Result := voParams;
        return(-1); exit;
      end;
      vPrIvaPrd :=  voParams.'PR_SUBSTRIB';

      if (vPrIvaPrd = 0) then begin
        vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
        vCdCST := vCdCST + vCdCSTOperacao;
      end else if (Copy(vCdCST,2,2) <> '10') then begin
        vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
        vCdCST := vCdCST + Copy( tFIS_REGRAFISCAL.'CD_CST', 1, 2);
      end;
    end;

    if (gInContribuinte = True) and (Copy(vCdCST,2,2) = '20') then begin
      vInPrReducao := False;

      if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'A') then begin
        if (gDsUFOrigem = gDsUFDestino) then begin
          vInPrReducao := True;
        end;

      end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'B') then begin
        if (gDsUFOrigem = gDsUFDestino) then begin
          vInPrReducao := True;
        end;

      end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'C') then begin
        if (gDsUFOrigem = gDsUFDestino) then begin
          vInPrReducao := True;
        end;

      end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'D') then begin
        if (gDsUFOrigem <> gDsUFDestino) then begin
          vInPrReducao := True;
        end;

      end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'E') then begin
        if (gDsUFOrigem <> gDsUFDestino) then begin
          vInPrReducao := True;
        end;

      end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'F') then begin
        if (gDsUFOrigem <> gDsUFDestino) then begin
          vInPrReducao := True;
        end;

      end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'G') then begin
        vInPrReducao := True;

      end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'H') then begin
        vInPrReducao := True;

      end else if ( tFIS_REGRAFISCAL.'TP_REDUCAO' = 'I') then begin
        vInPrReducao := True;
      end;

      if (vInPrReducao = False) then begin
        vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
        vCdCST := vCdCST + '00';
      end;
    end;
  end;

  if (vCdCFOP = 5912) or (vCdCFOP = 1912) then begin
    vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
    if (gInOptSimples = True) then begin
      vCdCST := vCdCST + '41';
    end else begin
      vCdCST := vCdCST + '50';
    end;
  end else if (vCdCFOP = 6912) or (vCdCFOP = 2912) then begin
    vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
    if (gInOptSimples = True) then begin
      vCdCST := vCdCST + '41';
    end else begin
      vCdCST := vCdCST + '00';
    end;
  end;
  if (( tPES_CLIENTE.'IN_CNSRFINAL' = True) or (gInContribuinte = False)) and (Copy(vCdCST,2,2) = '10') then begin
    if (( tPES_CLIENTE.'IN_CNSRFINAL' = True) and (gInContribuinte = True))
    or ( tPES_PFADIC.'IN_AMBULANTE' = True) then begin
    end else begin
      vCdCST := Copy( tPRD_PRODUTO.'CD_CST', 1, 1);
      vCdCST := vCdCST + '60';
    end;
  end;
  if (gCdServico > 0) and ( tFIS_REGRAFISCAL.'IN_ISS' = True) then begin
    vCdCST := '090';
  end;

  tFIS_CST.Limpar();
  tFIS_CST. 'CD_CST' :=  vCdCST;
  tFIS_CST.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'CST ' + vCdCST + ' não cadastrado!', cDS_METHOD);
    return(-1); exit;
  end;

  Result := '';
  Result. 'CD_CST' :=  vCdCST;
  return(0);
end;

//----------------------------------
function T_FISSVCO015.calculaImpostoCapa(pParams : String) : String;
//----------------------------------
const
  cDS_METHOD = 'ADICIONAL=Operação: T_FISSVCO015.calculaImpostoCapa()';
var
  viParams, voParams, vDsUF, vDsRegistro, vDsLstImposto, vDsLstCdImposto, vCdCST, vNmMunicipio : String;
  vCdEmpresa, vCdEmpresaParam, vCdOperacao, vCdPessoa, vCdRegraFiscal, vNrSeqEnd, vCdProduto : Real;
  vVlCalc, vVlBaseCalc, vCdImposto, vCdImpRetorno, vVlFrete, vVlSeguro, vVlDespAcessor, vCdDecreto : Real;
  vInIPI, vInSomaFrete, vInOrgaoPublico, vInSubstituicao : Boolean;
  vDtIniVigencia, vDtFimVigencia, vDtSistema : TDateTime;
begin
  Result := '';

  vCdEmpresa :=  pParams.'CD_EMPRESA';
  if (vCdEmpresa = 0) then begin
    vCdEmpresa :=  PARAM_GLB.'CD_EMPRESA';
  end;

  gDsUFOrigem :=  PARAM_GLB.'UF_ORIGEM';
  gDsUFDestino :=  pParams.'UF_DESTINO';
  gTpOrigemEmissao :=  pParams.'TP_ORIGEMEMISSAO'; //1 - Própria / 2 - Terceiros
  vCdOperacao :=  pParams.'CD_OPERACAO';
  vCdPessoa :=  pParams.'CD_PESSOA';
  vCdProduto :=  pParams.'CD_PRODUTO';
  vVlFrete :=  pParams.'VL_FRETE';
  vVlSeguro :=  pParams.'VL_SEGURO';
  vVlDespAcessor :=  pParams.'VL_DESPACESSOR';
  vCdCst :=  pParams.'CD_CST';
  vInIPI :=  pParams.'IN_IPI';
  gPrIPI :=  pParams.'PR_IPI';
  gCdDecretoItemCapa :=  pParams.'CD_DECRETO';
  vDtSistema := StrToDate( PARAM_GLB.'DT_SISTEMA');
  gTpAreaComercioOrigem  :=  PARAM_GLB.'TP_AREA_COMERCIO_ORIGEM';
  gTpAreaComercioDestino := 0;
  gInContribuinte := False;
  vInSubstituicao := False;

  gVlFrete :=  pParams.'VL_FRETE';
  gVlSeguro :=  pParams.'VL_SEGURO';
  gVlDespAcessor :=  pParams.'VL_DESPACESSOR';

  if (vVlFrete = 0)
  and (vVlSeguro = 0)
  and (vVlDespAcessor = 0)  then begin
    return(-1); exit;
  end;

  if (gTpOrigemEmissao = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Tipo emissão não informado!', cDS_METHOD);
    return(-1); exit;
  end;
  if (gDsUFDestino = '') then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'UF destino não informada!', cDS_METHOD);
    return(-1); exit;
  end;
  if (vCdOperacao = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Operação não informada!', cDS_METHOD);
    return(-1); exit;
  end;

  tPRD_PRODUTO.Limpar();

  tGER_OPERACAO.Limpar();
  tGER_OPERACAO. 'CD_OPERACAO' :=  vCdOperacao;
  tGER_OPERACAO.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Operação ' + FloatToStr(vCdOperacao) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  if ( tGER_OPERACAO.'IN_CALCIMPOSTO' <> True) then begin
    return(-1); exit;
  end;

  // Carrega o codigo do primeiro produto da nota fiscal para a nova logica de Subst. tributaria.
  if (vCdProduto <> 0) then begin
    tPRD_PRODUTO.Limpar();
    tPRD_PRODUTO. 'CD_PRODUTO' :=  vCdProduto;
    tPRD_PRODUTO.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Produto ' + FloatToStr(vCdProduto) + ' não cadastrado!', cDS_METHOD);
      return(-1); exit;
    end;

    //Incluído para calcular corretamente o imposto sobre os valores da capa
    viParams := '';
    viParams. 'CD_EMPRESA' :=  vCdEmpresa;
    viParams. 'CD_PRODUTO' :=  vCdProduto;
    voParams := 'PRDSVCO007'.{mtp}( viParams); // PRDSVCO008
    if (xStatus < 0) then begin
      Result := voParams;
      return(-1); exit;
    end;
    gInProdPropria :=  voParams.'IN_PRODPROPRIA';
  end ;

  tPES_PESSOA.Limpar();
  tPES_PESSOA. 'CD_PESSOA' :=  vCdPessoa;
  tPES_PESSOA.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Pessoa ' + FloatToStr(vCdPessoa) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  if (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and ( tGER_OPERACAO.'TP_MODALIDADE' = 4))
  or (( tGER_OPERACAO.'TP_OPERACAO' = 'E') and ( tGER_OPERACAO.'TP_MODALIDADE' = 3)) then begin //Venda / Devolução de venda
    tPES_CLIENTE.Limpar();
    tPES_CLIENTE. 'CD_CLIENTE' :=  vCdPessoa;
    tPES_CLIENTE.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Cliente ' + FloatToStr(vCdPessoa) + ' não cadastrado!', cDS_METHOD);
      return(-1); exit;
    end;
  end;

  gInPjIsento := False;
  if ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTO')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTA')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTOS')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTAS') then begin
    gInPjIsento := True;
  end;

  gInVarejista := False;
  if ( tPES_PESJURIDICA.'CD_ATIVIDADE' = gCdAtividadeVarejista) and (gCdAtividadeVarejista <> 0) then begin
    gInVarejista := True;
  end;

  if (gTpOrigemEmissao = 2) then begin //Terceiros
    if ( tGER_OPERACAO.'TP_MODALIDADE' <> 3) then begin //Devolução
      vDsUF := gDsUFOrigem;
      gDsUFOrigem := gDsUFDestino;
      gDsUFDestino := vDsUF;
    end;
  end else begin
    if ( tGER_OPERACAO.'TP_MODALIDADE' = 3) and ( tGER_OPERACAO.'TP_OPERACAO' = 'S') then begin //Devolução compra
      vDsUF := gDsUFOrigem;
      gDsUFOrigem := gDsUFDestino;
      gDsUFDestino := vDsUF;
    end;
  end;

  viParams := '';
  viParams. 'CD_PESSOA' :=  vCdPessoa;
  voParams := 'FCRSVCO057'.{mtp}( viParams);
  if (xStatus < 0) then begin
    Result := voParams;
    return(-1); exit;
  end;
  vInOrgaoPublico :=  voParams.'IN_ORGAOPUBLICO';

  if (vInOrgaoPublico = True) and (gDsUFOrigem = 'DF') then begin
    gInContribuinte := True;
  end else begin
     if ( tPES_CLIENTE.'IN_CNSRFINAL' = True) or ( tPES_PESSOA.'TP_PESSOA' = 'F') or (gInPjIsento = True) then begin
      if ( tPES_CLIENTE.'IN_CNSRFINAL' = True) and ( tPES_PESSOA.'TP_PESSOA' = 'J') and (gInPjIsento = False) then begin
        gInContribuinte := True;
      end else begin
        if ( tPES_PESSOA.'TP_PESSOA' = 'F')
        and ( tPES_CLIENTE.'NR_CODIGOFISCAL' <> '')
        and ((gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SP') or (gDsUFOrigem = 'RS'))  then begin
          gInContribuinte := True;
        end else begin
          gInContribuinte := False;
        end;
      end;
    end else begin
      gInContribuinte := True;
    end;
  end;
  if (gInOptSimples = True) then begin
    gTpAreaComercioDestino := 0;
  end else begin
    viParams := '';
    viParams. 'CD_PESSOA' :=  vCdPessoa;
    voParams := 'PESSVCO001'.{mtp}( viParams);
    if ( voParams.'CD_PESSOA' <> '') then begin
      gTpAreaComercioDestino :=  voParams.'TP_AREA_COMERCIO';
    end;
  end;

  //A verificação de pessoa jurídica foi comentado dentro do if e colocado aki, pois estava carregando a variável gTpRegimeOrigem somente then begin
  //quando era emissão de terceiros. Esta variável está sendo usado tbm para emissão própria no cálculo do ICMS.
  if ( tPES_PESSOA.'TP_PESSOA' <> 'F') then begin
    if (tPES_PESJURIDICA.IsEmpty()) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Pessoa ' + FloatToStr(vCdPessoa) + ' não é jurídica!', cDS_METHOD);
      return(-1); exit;
    end;
    gTpRegimeOrigem :=  tPES_PESJURIDICA.'TP_REGIMETRIB';
  end;

  if (gInContribuinte = False) and (gDsUFDestino <> 'EX') then begin
    gDsUFDestino := gDsUFOrigem;
  end;

  if (gDsUFDestino = gDsUFOrigem) then begin
    if (gInSomaFreteBaseICMS = True) then begin
      vInSomaFrete := True;
    end else begin
      if (gTpOrigemEmissao = 1) and (gInContribuinte = False) then begin // 1 -Emissão própria
        vInSomaFrete := True;
      end else begin
        vInSomaFrete := False;
      end;
    end;
  end else begin
    vInSomaFrete := True;
  end;

  vVlBaseCalc := vVlSeguro + vVlDespAcessor;
  if (vInSomaFrete = True) then begin
    vVlBaseCalc := vVlBaseCalc + vVlFrete;
  end;

  gVlTotalLiquido := vVlBaseCalc;
  gVlTotalLiquidoICMS := vVlBaseCalc;
  gVlTotalBruto := vVlSeguro + vVlDespAcessor + vVlFrete;

  if (gTpOrigemEmissao = 2) then begin //Terceiros
    vVlCalc := gVlTotalBruto * gPrIPI / 100;
    gVlIPI := Rounded(vVlCalc, 2);
  end;

  vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';

  tPRD_PRDREGRAFISCAL.Limpar();
  tPRD_PRDREGRAFISCAL. 'CD_PRODUTO' :=  vCdProduto;
  tPRD_PRDREGRAFISCAL. 'CD_OPERACAO' :=  vCdOperacao;
  tPRD_PRDREGRAFISCAL.Consultar();
  if (xStatus >= 0) then begin
    vCdRegraFiscal :=  tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL';
  end;

  if (vCdRegraFiscal = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
    return(-1); exit;
  end;

  tFIS_REGRAFISCAL.Limpar();
  tFIS_REGRAFISCAL. 'CD_REGRAFISCAL' :=  vCdRegraFiscal;
  tFIS_REGRAFISCAL.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Regra fiscal ' + FloatToStr(vCdRegraFiscal) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  if (vCdCST <> '') then begin
    gCdCST := vCdCST;
  end else begin
    gCdCST := '0' +  tFIS_REGRAFISCAL.'CD_CST';
  end;
  vCdCST := Copy(gCdCST,2,2);
  if (vCdCST = '10') or (vCdCST = '30') or (vCdCST = '60') or (vCdCST = '70') then begin
    vInSubstituicao := True;
  end;
  if (gCdDecretoItemCapa <> 0) then begin
    tFIS_DECRETOCAPA.Limpar();
    tFIS_DECRETOCAPA. 'CD_DECRETO' :=  gCdDecretoItemCapa;
    tFIS_DECRETOCAPA.Consultar();
    if (xStatus >= 0) then begin
      vCdDecreto :=  tFIS_DECRETOCAPA.'CD_DECRETO';
      vDtIniVigencia :=  tFIS_DECRETOCAPA.'DT_INIVIGENCIA';
      vDtFimVigencia :=  tFIS_DECRETOCAPA.'DT_FIMVIGENCIA';
    end;
  end else begin
    if ( tFIS_DECRETO.'CD_DECRETO' <> '') then begin
      vCdDecreto :=  tFIS_DECRETO.'CD_DECRETO';
      vDtIniVigencia :=  tFIS_DECRETO.'DT_INIVIGENCIA';
      vDtFimVigencia :=  tFIS_DECRETO.'DT_FIMVIGENCIA';
    end;
  end;

  if (vCdDecreto > 0) then begin
    if (vDtIniVigencia <> 0) and (vDtSistema < vDtIniVigencia) then begin
      vCdDecreto := 0;
    end;
    if (vDtFimVigencia <> 0) and (vDtSistema > vDtFimVigencia) then begin
      vCdDecreto := 0;
    end;
  end;

  tFIS_ALIQUOTAICMSUF.Limpar();
  tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
  tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
  tFIS_ALIQUOTAICMSUF.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastada de ' + gDsUfOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
    return(-1); exit;
  end;

  tFIS_IMPOSTO.Limpar();

  gVlICMS := 0;

  vDsLstCdImposto := '';
  //Para nao calcular o IPI, ganho de Performance
  if (vInIPI <> False) then begin
    put '3'.vDsLstCdImposto;
  end;
  put '1'.vDsLstCdImposto;

  if (vCdDecreto = 2155)
  or (vCdDecreto = 1020)
  or (vCdDecreto = 45471)
  or (vCdDecreto = 23731)
  or (vCdDecreto = 23732)
  or (vCdDecreto = 23733)
  or (vCdDecreto = 23734)
  or (vCdDecreto = 23735)
  or (vCdDecreto = 10201)
  or (vCdDecreto = 10202)
  or (vCdDecreto = 10203)
  or (vInSubstituicao = True) then begin
    put '2'.vDsLstCdImposto;
  end;
  put '5'.vDsLstCdImposto;
  put '6'.vDsLstCdImposto;

  repeat
    vCdImposto := StrToFloat(getitemGld(vDsLstCdImposto, 1));

    vDtIniVigencia := 0;

    viParams := '';
    viParams. 'CD_IMPOSTO' :=  vCdImposto;
    viParams. 'DT_INIVIGENCIA' :=   pParams.'DT_INIVIGENCIA';
    voParams := 'FISSVCO069'.{mtp}( viParams);
    if (xStatus < 0) then begin
      Result := voParams;
      return(-1); exit;
    end;

    if (voParams <> '') then begin
      vDtIniVigencia :=  voParams.'DT_INIVIGENCIA';
      vCdImpRetorno :=  voParams.'CD_IMPOSTO';

      tFIS_IMPOSTO, -1.Append();
      tFIS_IMPOSTO. 'CD_IMPOSTO' :=  vCdImpRetorno;
      tFIS_IMPOSTO. 'DT_INIVIGENCIA' :=  vDtIniVigencia;
      tFIS_IMPOSTO.Consultar();
      if (xStatus = -7) then begin
        tFIS_IMPOSTO.Consultar();
      end else if (xStatus < 0) then begin
        Result := SetStatus(STS_ERROR, 'GEN001', 'Imposto ' + FloatToStr(vCdImposto) + ' não cadastrado!', cDS_METHOD);
        return(-1); exit;
      end;

      if (vCdImposto = 1) then begin //ICMS;
        calculaICMS();
      end else if (vCdImposto = 2) then begin //ICMSSubst;
        calculaICMSSubst();
      end else if (vCdImposto = 3) then begin //IPI - Saída é calculado / Entrada é digitado na tela;
        calculaIPI();
      end else if (vCdImposto = 5) then begin //COFINS;
        calculaCOFINS();
      end else if (vCdImposto = 6) then begin //PIS/PASEP;
        calculaPIS();
      end;
    end;

    delitemGld(vDsLstCdImposto, 1);
  until (vDsLstCdImposto = '');

  vDsLstImposto := '';

  if (tFIS_IMPOSTO.IsEmpty() = 0) then begin
    sort_e(tFIS_IMPOSTO, 'CD_IMPOSTO');
    setocc(tFIS_IMPOSTO, 1);
    while (xStatus >=0) do begin
      if ( tFIS_IMPOSTO.'CD_IMPOSTO' > 0) then begin
        vDsRegistro := '';
        putlistitensocc_e(vDsRegistro, tFIS_IMPOSTO);
        put vDsRegistro.vDsLstImposto;
      end;  
      setocc(tFIS_IMPOSTO, tFIS_IMPOSTO.RecNo + 1);
    end;
  end;

  tFIS_CST.Limpar();
  tFIS_CST. 'CD_CST' :=  gCdCST;
  tFIS_CST.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'CST ' + gCdCST + ' não cadastrado!', cDS_METHOD);
    return(-1); exit;
  end;

  Result := '';
  Result. 'CD_CST' :=  gCdCST;
  Result. 'CD_DECRETO' :=  gCdDecreto;
  Result. 'DS_LSTIMPOSTO' :=  vDsLstImposto;
  return(0);
end;

//----------------------------------
function T_FISSVCO015.calculaImpostoItem(pParams : String) : String;
//----------------------------------
const
  cDS_METHOD = 'ADICIONAL=Operação: T_FISSVCO015.calculaImpostoItem()';
var
  viParams, voParams,
  vCdCST, vDsUF, vDsRegistro, vDsLstImposto, vDsLstCdImposto, vCdMPTer, vNmMunicipio : String;
  vCdEmpresa, vCdEmpresaParam, vCdProduto, vCdOperacao, vCdPessoa, vNrSeqEnd : Real;
  vCdImpRetorno, vCdImposto, vCdRegraFiscal : Real;
  vInOrgaoPublico, vInSubstituicao : Boolean;
  vDtIniVigencia : TDateTime;
begin
  Result := '';

  vCdEmpresa :=  pParams.'CD_EMPRESA';
  if (vCdEmpresa = 0) then begin
    vCdEmpresa :=  PARAM_GLB.'CD_EMPRESA';
  end;
  gDsUFOrigem :=  PARAM_GLB.'UF_ORIGEM';
  gDsUFDestino :=  pParams.'UF_DESTINO';
  gTpOrigemEmissao :=  pParams.'TP_ORIGEMEMISSAO';
  vCdProduto :=  pParams.'CD_PRODUTO';
  vCdMPTer :=  pParams.'CD_MPTER';
  gCdServico :=  pParams.'CD_SERVICO';
  vCdOperacao :=  pParams.'CD_OPERACAO';
  vCdPessoa :=  pParams.'CD_PESSOA';
  gCdCST :=  pParams.'CD_CST';
  gVlTotalBruto :=  pParams.'VL_TOTALBRUTO';
  gVlTotalLiquido :=  pParams.'VL_TOTALLIQUIDO';
  gVlTotalLiquidoICMS :=  pParams.'VL_TOTALLIQUIDO';
  gPrIPI :=  pParams.'PR_IPI';
  gVlIPI :=  pParams.'VL_IPI';
  gTpModDctoFiscal :=  pParams.'TP_MODDCTOFISCAL';
  vDsLstCdImposto :=  pParams.'DS_LST_CD_IMPOSTO';
  gTpAreaComercioOrigem :=  PARAM_GLB.'TP_AREA_COMERCIO_ORIGEM';
  gTpAreaComercioDestino := 0;
  gInContribuinte := False;
  gCdDecretoItemCapa := 0;

  if (gTpOrigemEmissao = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Tipo emissão não informado!', cDS_METHOD);
    return(-1); exit;
  end;
  if (gDsUFDestino = '') then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'UF destino não informada!', cDS_METHOD);
    return(-1); exit;
  end ;
  if (vCdOperacao = 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Operação não informada!', cDS_METHOD);
    return(-1); exit;
  end;

  tPRD_PRODUTO.Limpar();

  tGER_OPERACAO.Limpar();
  tGER_OPERACAO. 'CD_OPERACAO' :=  vCdOperacao;
  tGER_OPERACAO.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Operação ' + FloatToStr(vCdOperacao) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  if (vCdProduto = 0)
  and (vCdMPTer = '')
  and (gCdServico = 0) then begin
    return(0); exit;
  end;

  if ( tGER_OPERACAO.'IN_CALCIMPOSTO' <> True) then begin
    return(0); exit;
  end;

  if (gCdCST = '') then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'CST não informado!', cDS_METHOD);
    return(-1); exit;
  end;

  if (gInPDVOtimizado <> True) then begin
    if (gVlTotalBruto = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Valor total bruto não informado p/ o produto ' + FloatToStr(vCdProduto) + '!', cDS_METHOD);
      return(-1); exit;
    end;

    if (gVlTotalLiquido = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Valor total líquido não informado p/ oproduto ' + FloatToStr(vCdProduto) + '!', cDS_METHOD);
      return(-1); exit;
    end;
  end;

  tPES_PESSOA.Limpar();
  tPES_PESSOA. 'CD_PESSOA' :=  vCdPessoa;
  tPES_PESSOA.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Pessoa ' + FloatToStr(vCdPessoa) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  //Venda / Devolução de venda
  if (( tGER_OPERACAO.'TP_OPERACAO' = 'S') and (item_a('TP_MODALIDADE', tGER_OPERACAO) = '4'))
  or (( tGER_OPERACAO.'TP_OPERACAO' = 'E') and (item_a('TP_MODALIDADE', tGER_OPERACAO) = '3')) then begin
    tPES_CLIENTE.Limpar();
    tPES_CLIENTE. 'CD_CLIENTE' :=  vCdPessoa;
    tPES_CLIENTE.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Cliente ' + FloatToStr(vCdPessoa) + ' não cadastrado!', cDS_METHOD);
      return(-1); exit;
    end;
  end;

  gInPjIsento := False;
  if ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTO')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTA')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTOS')
  or ( tPES_PESJURIDICA.'NR_INSCESTL' = 'ISENTAS') then begin
    gInPjIsento := True;
  end;

  gInVarejista := False;
  if ( tPES_PESJURIDICA.'CD_ATIVIDADE' = gCdAtividadeVarejista) and (gCdAtividadeVarejista > 0) then begin
    gInVarejista := True;
  end;
  if (gTpOrigemEmissao = 2) then begin //Terceiros
    if ( tGER_OPERACAO.'TP_MODALIDADE' <> '3') then begin //Devolução
      vDsUF := gDsUFOrigem;
      gDsUFOrigem := gDsUFDestino;
      gDsUFDestino := vDsUF;
    end;
  end else begin
    if (( tGER_OPERACAO.'TP_MODALIDADE' = '3') and (item_a('TP_OPERACAO', tGER_OPERACAO) = 'S')) then begin //Devolução compra
      vDsUF  := gDsUFOrigem;
      gDsUFOrigem := gDsUFDestino;
      gDsUFDestino := vDsUF;
    end;
  end;

  viParams := '';
  viParams. 'CD_PESSOA' :=  vCdPessoa;
  voParams := 'FCRSVCO057'.{mtp}( viParams);
  if (xStatus < 0) then begin
    Result := voParams;
    return(-1); exit;
  end;
  vInOrgaoPublico :=  voParams.'IN_ORGAOPUBLICO';

  if (vInOrgaoPublico = True) and (gDsUFOrigem = 'DF') then begin
    gInContribuinte := True;
  end else begin
    if ( tPES_CLIENTE.'IN_CNSRFINAL' = True) or ( tPES_PESSOA.'TP_PESSOA' = 'F') or (gInPjIsento = True) then begin
      if ( tPES_CLIENTE.'IN_CNSRFINAL' = True) and ( tPES_PESSOA.'TP_PESSOA' = 'J') and (gInPjIsento = False) then begin
        gInContribuinte := True;
      end else begin
        if ( tPES_PESSOA.'TP_PESSOA' = 'F')
        and ( tPES_CLIENTE.'NR_CODIGOFISCAL' <> '')
        and ((gDsUFOrigem = 'PR') or (gDsUFOrigem = 'SP') or (gDsUFOrigem = 'RS')) then begin
          gInContribuinte := True;
        end else begin
          gInContribuinte := False;
        end;
      end;
    end else begin
      gInContribuinte := True;
    end;
  end;

  if (gInOptSimples = True) then begin
    gTpAreaComercioDestino := 0;
  end else begin
    viParams := '';
    viParams. 'CD_PESSOA' :=  vCdPessoa;
    voParams := 'PESSVCO001'.{mtp}( viParams);
    if ( voParams.'CD_PESSOA' <> '') then begin
      gTpAreaComercioDestino :=  voParams.'TP_AREACOMERCIO';
    end;
  end;
  //Este retrieve foi comentado dentro do if e colocado aki, pois estava carregando a variável gTpRegimeOrigem somente
  //quando era emissão de terceiros. Esta variável está sendo usado tbm para emissão própria no cálculo do ICMS.
  if ( tPES_PESSOA.'TP_PESSOA' <> 'F') then begin
    if (tPES_PESJURIDICA.IsEmpty()) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Pessoa ' + FloatToStr(vCdPessoa) + ' não é jurídica!', cDS_METHOD);
      return(-1); exit;
    end;
    gTpRegimeOrigem :=  tPES_PESJURIDICA.'TP_REGIMETRIB';
  end;

  if (gInContribuinte = False) and (gDsUFDestino <> 'EX') then begin
    gDsUFDestino := gDsUFOrigem;
  end;

  if ( tGER_OPERACAO.'TP_MODALIDADE' = 'D') and (gTpModDctoFiscal = 0) then begin // Condição implementada para o CIAP
    gTpModDctoFiscal := 85;
  end else if ( tGER_OPERACAO.'TP_MODALIDADE' = 'G') and (gTpModDctoFiscal = 0)  then begin
    gTpModDctoFiscal := 87 // Nota Fiscal CIAP;
  end;

  vCdRegraFiscal := 0;

  if (gCdServico > 0) then begin
    gInProdPropria := False;
    vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
    if (vCdRegraFiscal = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;
  end else if (vCdMPTer <> '') then begin
    gInProdPropria := False;
    vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
    if (vCdRegraFiscal = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;
  end else begin
    tPRD_PRODUTO.Limpar();
    tPRD_PRODUTO. 'CD_PRODUTO' :=  vCdProduto;
    tPRD_PRODUTO.Consultar();
    if (xStatus < 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Produto ' + FloatToStr(vCdProduto) + ' não cadastrado!', cDS_METHOD);
      return(-1); exit;
    end;

    viParams := '';
    viParams. 'CD_EMPRESA' :=  vCdEmpresa;
    viParams. 'CD_PRODUTO' :=  vCdProduto;
    voParams := 'PRDSVCO007'.{mtp}( viParams); // PRDSVCO008
    if (xStatus < 0) then begin
      Result := voParams;
      return(-1); exit;
    end;
    gInProdPropria :=  voParams.'IN_PRODPROPRIA';

    tPRD_PRDREGRAFISCAL.Limpar();
    tPRD_PRDREGRAFISCAL. 'CD_PRODUTO' :=  vCdProduto;
    tPRD_PRDREGRAFISCAL. 'CD_OPERACAO' :=  vCdOperacao;
    tPRD_PRDREGRAFISCAL.Consultar();
    if (xStatus >= 0) then begin
      vCdRegraFiscal :=  tPRD_PRDREGRAFISCAL.'CD_REGRAFISCAL';
    end else begin
      vCdRegraFiscal :=  tGER_OPERACAO.'CD_REGRAFISCAL';
    end;

    if (vCdRegraFiscal = 0) then begin
      Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma regra fiscal cadastrada p/ o produto ' + FloatToStr(vCdProduto) + ' e a operação ' + FloatToStr(vCdOperacao) + '!', cDS_METHOD);
      return(-1); exit;
    end;
  end;

  tFIS_REGRAFISCAL.Limpar();
  tFIS_REGRAFISCAL. 'CD_REGRAFISCAL' :=  vCdRegraFiscal;
  tFIS_REGRAFISCAL.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Regra fiscal ' + FloatToStr(vCdRegraFiscal) + ' não cadastrada!', cDS_METHOD);
    return(-1); exit;
  end;

  tFIS_ALIQUOTAICMSUF.Limpar();
  tFIS_ALIQUOTAICMSUF. 'CD_UFORIGEM' :=  gDsUFOrigem;
  tFIS_ALIQUOTAICMSUF. 'CD_UFDESTINO' :=  gDsUFDestino;
  tFIS_ALIQUOTAICMSUF.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'Nenhuma alíquota cadastada de ' + gDsUfOrigem + ' para ' + gDsUFDestino + '!', cDS_METHOD);
    return(-1); exit;
  end;

  tFIS_IMPOSTO.Limpar();

  gVlICMS := 0;

  if (vDsLstCdImposto = '') then begin
    if (gCdServico > 0) then begin
      if ( tFIS_REGRAFISCAL.'IN_ISS' = True) then begin
        put '4'.vDsLstCdImposto;
      end else begin
        put '1'.vDsLstCdImposto;
        put '2'.vDsLstCdImposto;
      end;
    end else begin
      put '3'.vDsLstCdImposto;
      put '1'.vDsLstCdImposto;
      put '2'.vDsLstCdImposto;
    end;
    put '5'.vDsLstCdImposto;
    put '6'.vDsLstCdImposto;
    if ( tFIS_REGRAFISCAL.'IN_IR' = True) then begin  //27/02/2012 - Não calcular IMPOSTO DE RENDA caso não esteja na regra
      put '7'.vDsLstCdImposto;
    end;
  end;

  vDsLstCdImposto := vDsLstCdImposto;

  repeat
    vCdImposto := StrToFloat(getitemGld(vDsLstCdImposto, 1));

    vDtIniVigencia := 0;

    viParams := '';
    viParams. 'CD_IMPOSTO' :=  vCdImposto;
    viParams. 'DT_INIVIGENCIA' :=   pParams.'DT_INIVIGENCIA';
    voParams := 'FISSVCO069'.{mtp}( viParams);
    if (xStatus < 0) then begin
      Result := voParams;
      return(-1); exit;
    end;

    if (voParams <> '') then begin
      vDtIniVigencia :=  voParams.'DT_INIVIGENCIA';
      vCdImpRetorno :=  voParams.'CD_IMPOSTO';

      tFIS_IMPOSTO, -1.Append();
      tFIS_IMPOSTO. 'CD_IMPOSTO' :=  vCdImpRetorno;
      tFIS_IMPOSTO. 'DT_INIVIGENCIA' :=  vDtIniVigencia;
      tFIS_IMPOSTO.Consultar();
      if (xStatus = -7) then begin
        tFIS_IMPOSTO.Consultar();
      end else if (xStatus < 0) then begin
        Result := SetStatus(STS_ERROR, 'GEN001', 'Imposto ' + FloatToStr(vCdImposto) + ' não cadastrado!', cDS_METHOD);
        return(-1); exit;
      end;

      if (vCdImposto = 1) then begin //ICMS;
        calculaICMS();
      end else if (vCdImposto = 2) then begin //ICMSSubst;
        calculaICMSSubst();
      end else if (vCdImposto = 3) then begin //IPI - Saída é calculado / Entrada é digitado na tela;
        calculaIPI();
      end else if (vCdImposto = 5) then begin //COFINS;
        calculaCOFINS();
      end else if (vCdImposto = 6) then begin //PIS/PASEP;
        calculaPIS();
      end;
    end;

    delitemGld(vDsLstCdImposto, 1);
  until (vDsLstCdImposto = '');

  vDsLstImposto := '';

  if (tFIS_IMPOSTO.IsEmpty() = 0) then begin
    sort_e(tFIS_IMPOSTO, 'CD_IMPOSTO');
    setocc(tFIS_IMPOSTO, 1);
    while (xStatus >=0) do begin
      if ( tFIS_IMPOSTO.'CD_IMPOSTO' > 0) then begin
        vDsRegistro := '';
        putlistitensocc_e(vDsRegistro, tFIS_IMPOSTO);
        put vDsRegistro.vDsLstImposto;
      end;
      setocc(tFIS_IMPOSTO, tFIS_IMPOSTO.RecNo + 1);
    end;
  end;

  tFIS_IMPOSTO.Limpar();

  tFIS_CST.Limpar();
  tFIS_CST. 'CD_CST' :=  gCdCST;
  tFIS_CST.Consultar();
  if (xStatus < 0) then begin
    Result := SetStatus(STS_ERROR, 'GEN001', 'CST ' + gCdCST + ' não cadastrado!', cDS_METHOD);
    return(-1); exit;
  end;

  Result := '';
  Result. 'CD_CST' :=  gCdCST;
  Result. 'CD_DECRETO' :=  gCdDecreto;
  Result. 'DS_LSTIMPOSTO' :=  vDsLstImposto;
  return(0);
end;

initialization
  RegisterClass(T_FISSVCO015);

end.
