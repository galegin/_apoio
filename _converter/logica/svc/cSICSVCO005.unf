;-------------
entry getParam
;-------------
	params		
		numeric piCdEmpresa : IN
		string piDsOperacao : IN
	endparams

	variables
		string viParams, voParams
	endvariables

	if (piCdEmpresa = 0)
		piCdEmpresa = $item("CD_EMPRESA", $xlpg$)
	endif

	if (piCdEmpresa = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa para busca de parametros não informada!", "ADICIONAL=Operação->SICSVCO005.%%piDsOperacao")
		return(-1)
	endif	

	viParams = ""
	putitem viParams, -1, "TP_TROCO_MAXIMO"
	putitem viParams, -1, "IN_AGREGA_IPI_CUSTO_PRD"
	activate "ADMSVCO001".GetParamEmpresa(piCdEmpresa, viParams, voParams, $xCdErro$, $xCtxerro$)
	if ($procerror)
		$instancehandle->SetStatus(<STS_ERRO>, $procerror, $procerrorcontext, "")
		return(-1)
	elseif ($xCdErro$)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=%%$item("DESCRICAO", $xCtxErro$)", "")
		return(-1)
	endif
	
	$tpTrocoMaximo$ = $item("TP_TROCO_MAXIMO", voParams)
	if ($tpTrocoMaximo$ > 2)
		$tpTrocoMaximo$ = 0
	endif
	$inAgregaIpi$ = $item("IN_AGREGA_IPI_CUSTO_PRD", voParams)
	
	return(0)
end

;-------------------------------
public operation reservaNumeroNF
	;-------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	;Baseada em um listar de NFs, esta rotina retorna um outra lista, contendo
	;as NFs recebidas e as NFs associdas no CCusto, caso existam
	
	variables
		string vDsLstNF, vDsRegistro
		numeric vCdEmpresa, vNrFatura
		date vDtFatura
	endvariables
	
	vDsLstNF = $item("DS_LSTNF", piParams)
	
	if (vDsLstNF = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Lista não informada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	clear/e "FIS_NFSVC"
	clear/e "FIS_S_NFSVC"
	
	repeat
		getitem vDsRegistro, vDsLstNF, 1
		vCdEmpresa = $item("CD_EMPRESA", vDsRegistro)
		vNrFatura = $item("NR_FATURA", vDsRegistro)
		vDtFatura = $item("DT_FATURA", vDsRegistro)
		
		if (vCdEmpresa = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif
		
		if (vNrFatura = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=NF não informada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1) 
		endif
		
		if (vDtFatura = "")
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data NF não informada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif
		
		creocc "FIS_NFSVC", -1
		CD_EMPRESA.FIS_NFSVC/init = vCdEmpresa
		NR_FATURA.FIS_NFSVC/init = vNrFatura
		DT_FATURA.FIS_NFSVC/init = vDtFatura
		retrieve/o "FIS_NFSVC"
		if ($status = -7)
			retrieve/x "FIS_NFSVC"
		elseif ($status = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=NF %%vNrFatura não reservada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1) 
		endif
		
		clear/e "GER_EMPRESASVC"
		CD_CCUSTO.GER_EMPRESASVC/init = CD_EMPFAT.FIS_NFSVC
		retrieve/e "GER_EMPRESASVC"
		if ($status >= 0)
			clear/e "FIS_S_NFSVC"
			CD_EMPRESA.FIS_S_NFSVC/init = CD_EMPRESA.GER_EMPRESASVC
			NR_FATURA.FIS_S_NFSVC/init = vNrFatura
			DT_FATURA.FIS_S_NFSVC/init = vDtFatura
			retrieve/e "FIS_S_NFSVC"
			if ($status >= 0)
				creocc "FIS_NFSVC", -1
				CD_EMPRESA.FIS_NFSVC/init = CD_EMPRESA.FIS_S_NFSVC
				NR_FATURA.FIS_NFSVC/init = NR_FATURA.FIS_S_NFSVC
				DT_FATURA.FIS_NFSVC/init = DT_FATURA.FIS_S_NFSVC
				retrieve/o "FIS_NFSVC"
				if ($status = -7)
					retrieve/x "FIS_NFSVC"
				elseif ($status = 0)
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=NF %%vNrFatura não reservada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1) 
				endif
			endif
		endif
		
		delitem vDsLstNF, 1
	until (vDsLstNF = "")
	
	poParams = ""
	vDsLstNF = ""
	
	if ($empty("FIS_NFSVC") = 0)
		setocc "FIS_NFSVC", 1
		while ($status >= 0)    
			vDsRegistro = ""
			putitem/id vDsRegistro, "CD_EMPRESA", CD_EMPRESA.FIS_NFSVC
			putitem/id vDsRegistro, "NR_FATURA", NR_FATURA.FIS_NFSVC
			putitem/id vDsRegistro, "DT_FATURA", DT_FATURA.FIS_NFSVC
			putitem vDsLstNF, -1, vDsRegistro
			setocc "FIS_NFSVC", $curocc("FIS_NFSVC") + 1
		endwhile
	endif
	
	putitem/id poParams, "DS_LSTNF", vDsLstNF
	
	exit(0)
end

;------------------------------
public operation liberaNumeroNF
	;------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	;Baseada em um listas de NFs, esta rotina retorna uma outra listas contendo
	;somentes as NFs pertencentes a Empresa, removendos as NFs do CCustos
	
	variables
		string vDsLstNF, vDsRegistro
		numeric vCdEmpresa, vNrFatura
		date vDtFatura
	endvariables
	
	vDsLstNF = $item("DS_LSTNF", piParams)    
	
	if (vDsLstNF = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Lista não informada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	clear/e "FIS_NFSVC"
	
	repeat
		getitem vDsRegistro, vDsLstNF, 1
		vCdEmpresa = $item("CD_EMPRESA", vDsRegistro)
		vNrFatura = $item("NR_FATURA", vDsRegistro)
		vDtFatura = $item("DT_FATURA", vDsRegistro)
		
		if (vCdEmpresa = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif
		
		if (vNrFatura = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=NF não informada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1) 
		endif
		
		if (vDtFatura = "")
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data NF não informada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif
		
		creocc "FIS_NFSVC", -1
		CD_EMPRESA.FIS_NFSVC/init = vCdEmpresa
		NR_FATURA.FIS_NFSVC/init = vNrFatura
		DT_FATURA.FIS_NFSVC/init = vDtFatura
		retrieve/o "FIS_NFSVC"
		if ($status = -7)
			retrieve/x "FIS_NFSVC"
		elseif ($status = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=NF %%vNrFatura não reservada!", "ADICIONAL=Operação->SICSVCO005.reservaNumeroNF")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1) 
		endif
		
		clear/e "GER_EMPRESASVC"
		CD_EMPRESA.GER_EMPRESASVC/init = CD_EMPFAT.FIS_NFSVC
		retrieve/e "GER_EMPRESASVC"
		if ($status >= 0)
			if (CD_CCUSTO.GER_EMPRESASVC > 0)
				discard "FIS_NFSVC"
			endif
		endif
		
		delitem vDsLstNF, 1
	until (vDsLstNF = "")
	
	poParams = ""
	vDsLstNF = ""
	
	if ($empty("FIS_NFSVC") = 0)
		setocc "FIS_NFSVC", 1
		while ($status >= 0)    
			vDsRegistro = ""
			putitem/id vDsRegistro, "CD_EMPRESA", CD_EMPRESA.FIS_NFSVC
			putitem/id vDsRegistro, "NR_FATURA", NR_FATURA.FIS_NFSVC
			putitem/id vDsRegistro, "DT_FATURA", DT_FATURA.FIS_NFSVC
			putitem vDsLstNF, -1, vDsRegistro
			setocc "FIS_NFSVC", $curocc("FIS_NFSVC") + 1
		endwhile
	endif
	
	putitem/id poParams, "DS_LSTNF", vDsLstNF
	
	exit(0)
end

;---------------------------------
public operation validaRecebimento
	;---------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	;Baseada em um lista de Transações, esta rotina retorna um outra lista, contendo
	;as Transações recebidas e as Transações associdas no CCusto, caso existam
	;Esta rotina é utilizada exclusivamente para transações de venda
	variables
		string vDsRegistro, vDsLstTransacao, vDsLstEncargoFin, vDsLstTransacaoRec
		numeric vCdEmpresa, vNrTransacao, vCdEmpresaLogin, vCdEmpresaTra
		date vDtTransacao
		boolean vInDinheiro, vInEncargoFin
	endvariables
	
	vDsLstTransacao = $item("DS_LSTTRANSACAO", piParams)    
	
	if (vDsLstTransacao = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Lista de transação não informada!", "ADICIONAL=Operação->SICSVCO005.validaRecebimento")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	vCdEmpresaLogin = $item("CD_EMPRESA", $xlpg$)
	
	call getParam(vCdEmpresaLogin, "validaRecebimento")
	if ($procerror)
		$instancehandle->SetStatus(<STS_ERRO>, $procerror, $procerrorcontext, "")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	if ($status < 0)
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	clear/e "TRA_TRANSACAOSVC"
	
	repeat
		getitem vDsRegistro, vDsLstTransacao, 1
		vCdEmpresa = $item("CD_EMPRESA", vDsRegistro)
		vNrTransacao = $item("NR_TRANSACAO", vDsRegistro)
		vDtTransacao = $item("DT_TRANSACAO", vDsRegistro)
		
		if (vCdEmpresa = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.validaRecebimento")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1)
		endif
		
		if (vNrTransacao = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número da transação não informado!", "ADICIONAL=Operação->SICSVCO005.validaRecebimento")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1) 
		endif
		
		if (vDtTransacao = "")
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação não informada!", "ADICIONAL=Operação->SICSVCO005.validaRecebimento")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1)
		endif
		
		creocc "TRA_TRANSACAOSVC", -1
		CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
		NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
		DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
		retrieve/o "TRA_TRANSACAOSVC"
		if ($status = -7)
			retrieve/x "TRA_TRANSACAOSVC"
		elseif ($status = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.validaRecebimento")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1) 
		endif
		
		IN_ENCARGOFIN.TRA_TRANSACAOSVC/init = <FALSE>
		vInEncargoFin = <FALSE>
		vCdEmpresaTra = 0
		
		clear/e "GER_EMPRESASVC"
		CD_EMPRESA.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
		retrieve/e "GER_EMPRESASVC"
		if ($status < 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa %%vCdEmpresa não cadastrada!", "ADICIONAL=Operação->SICSVCO005.validaRecebimento")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1)
		else
			if (CD_CCUSTO.GER_EMPRESASVC > 0)
				vCdEmpresaTra = CD_CCUSTO.GER_EMPRESASVC
				vInEncargoFin = <TRUE>
			else
				clear/e "GER_EMPRESASVC"
				CD_CCUSTO.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
				retrieve/e "GER_EMPRESASVC"
				if ($status >= 0)
					vCdEmpresaTra = CD_EMPRESA.GER_EMPRESASVC
				endif
			endif    
		endif    
		
		IN_ENCARGOFIN.TRA_TRANSACAOSVC/init = vInEncargoFin
		
		if (vCdEmpresaTra > 0)
			clear/e "TRA_S_TRANSACSVC"
			CD_EMPFAT.TRA_S_TRANSACSVC/init = vCdEmpresaTra
			NR_TRANSACAO.TRA_S_TRANSACSVC/init = vNrTransacao
			DT_TRANSACAO.TRA_S_TRANSACSVC/init = vDtTransacao
			retrieve/e "TRA_S_TRANSACSVC"
			if ($status >= 0)
				creocc "TRA_TRANSACAOSVC", -1
				CD_EMPRESA.TRA_TRANSACAOSVC/init = CD_EMPRESA.TRA_S_TRANSACSVC
				NR_TRANSACAO.TRA_TRANSACAOSVC/init = NR_TRANSACAO.TRA_S_TRANSACSVC
				DT_TRANSACAO.TRA_TRANSACAOSVC/init = DT_TRANSACAO.TRA_S_TRANSACSVC
				retrieve/o "TRA_TRANSACAOSVC"
				if ($status = -7)
					retrieve/x "TRA_TRANSACAOSVC"
				elseif ($status = 0)
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transaçao %%vNrTransacao não validada!", "ADICIONAL=Operação->SICSVCO005.validaRecebimento")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1) 
				endif
				IN_ENCARGOFIN.TRA_TRANSACAOSVC/init = !vInEncargoFin
			endif
		endif        
		
		delitem vDsLstTransacao, 1
	until (vDsLstTransacao = "")
	
	poParams = ""
	vDsLstTransacao = ""
	vDsLstEncargoFin = ""
	vDsLstTransacaoRec = ""
	
	if ($empty("TRA_TRANSACAOSVC") = 0)
		setocc "TRA_TRANSACAOSVC", 1
		while ($status >= 0)    
			if (TP_SITUACAO.TRA_TRANSACAOSVC = 5) ;Encerrada
				vDsRegistro = ""
				putitem/id vDsRegistro, "CD_EMPRESA", CD_EMPRESA.TRA_TRANSACAOSVC
				putitem/id vDsRegistro, "NR_TRANSACAO", NR_TRANSACAO.TRA_TRANSACAOSVC
				putitem/id vDsRegistro, "DT_TRANSACAO", DT_TRANSACAO.TRA_TRANSACAOSVC
				if (!IN_ENCARGOFIN.TRA_TRANSACAOSVC)
					putitem vDsLstTransacao, -1, vDsRegistro
				else
					putitem vDsLstEncargoFin, -1, vDsRegistro
				endif
				putitem vDsLstTransacaoRec, -1, vDsRegistro
			endif
			setocc "TRA_TRANSACAOSVC", $curocc("TRA_TRANSACAOSVC") + 1
		endwhile
	endif
	
	putitem/id poParams, "DS_LSTTRANSACAO", vDsLstTransacao
	putitem/id poParams, "DS_LSTENCARGOFIN", vDsLstEncargoFin    
	putitem/id poParams, "DS_LSTTRANSACAOREC", vDsLstTransacaoRec
	
	exit(0)
end

;-------------------------------
public operation validaTransacao
;-------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	;Baseada em um lista de Transações, esta rotina retorna uma lista, contendo
	;as Transações recebidas e as Transações associdas no CCusto, caso existam
	variables
		string vDsRegistro, vDsLstTransacao
		numeric vCdEmpresa, vNrTransacao, vCdEmpresaLogin, vCdEmpresaTra
		date vDtTransacao
		boolean vInDinheiro, vInEncargoFin, vInCCusto
	endvariables
	
	vDsLstTransacao = $item("DS_LSTTRANSACAO", piParams)
	
	if (vDsLstTransacao = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Lista de transação não informada!", "ADICIONAL=Operação->SICSVCO005.validaTransacao")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	vCdEmpresaLogin = $item("CD_EMPRESA", $xlpg$)
	
	call getParam(vCdEmpresaLogin, "validaTransacao")
	if ($procerror)
		$instancehandle->SetStatus(<STS_ERRO>, $procerror, $procerrorcontext, "")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	if ($status < 0)
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif

	vInCCusto = <FALSE>
	clear/e "GER_EMPRESASVC"
	CD_EMPRESA.GER_EMPRESASVC/init = vCdEmpresaLogin
	retrieve/e "GER_EMPRESASVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa %%vCdEmpresaLogin não cadastrada!", "ADICIONAL=Operação->SICSVCO005.validaTransacao")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	else
		if (CD_CCUSTO.GER_EMPRESASVC > 0)			
			vInCCusto = <TRUE>
		endif    
	endif
	
	clear/e "TRA_TRANSACAOSVC"
	
	repeat
		getitem vDsRegistro, vDsLstTransacao, 1
		vCdEmpresa = $item("CD_EMPRESA", vDsRegistro)
		vNrTransacao = $item("NR_TRANSACAO", vDsRegistro)
		vDtTransacao = $item("DT_TRANSACAO", vDsRegistro)
		
		if (vCdEmpresa = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.validaTransacao")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1)
		endif
		
		if (vNrTransacao = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número da transação não informado!", "ADICIONAL=Operação->SICSVCO005.validaTransacao")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1) 
		endif
		
		if (vDtTransacao = "")
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação não informada!", "ADICIONAL=Operação->SICSVCO005.validaTransacao")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1)
		endif
		
		creocc "TRA_TRANSACAOSVC", -1
		CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
		NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
		DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
		retrieve/o "TRA_TRANSACAOSVC"
		if ($status = -7)
			retrieve/x "TRA_TRANSACAOSVC"
		elseif ($status = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.validaTransacao")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1) 
		endif

		IN_ENCARGOFIN.TRA_TRANSACAOSVC/init = <FALSE>
		vInEncargoFin = <FALSE>
		vCdEmpresaTra = 0		
		
		clear/e "GER_EMPRESASVC"
		CD_EMPRESA.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
		retrieve/e "GER_EMPRESASVC"
		if ($status < 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa %%CD_EMPFAT.TRA_TRANSACAOSVC não cadastrada!", "ADICIONAL=Operação->SICSVCO005.validaTransacao")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1)
		else
			if (CD_CCUSTO.GER_EMPRESASVC > 0)
				vCdEmpresaTra = CD_CCUSTO.GER_EMPRESASVC
				vInEncargoFin = <TRUE>
			else
				clear/e "GER_EMPRESASVC"
				CD_CCUSTO.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
				retrieve/e "GER_EMPRESASVC"
				if ($status >= 0)
					vCdEmpresaTra = CD_EMPRESA.GER_EMPRESASVC
				endif
			endif    
		endif

		IN_ENCARGOFIN.TRA_TRANSACAOSVC/init = vInEncargoFin 		
		
		if (vCdEmpresaTra > 0)
			clear/e "TRA_S_TRANSACSVC"
			CD_EMPFAT.TRA_S_TRANSACSVC/init = vCdEmpresaTra
			NR_TRANSACAO.TRA_S_TRANSACSVC/init = vNrTransacao
			DT_TRANSACAO.TRA_S_TRANSACSVC/init = vDtTransacao
			retrieve/e "TRA_S_TRANSACSVC"
			if ($status >= 0)
				creocc "TRA_TRANSACAOSVC", -1
				CD_EMPRESA.TRA_TRANSACAOSVC/init = CD_EMPRESA.TRA_S_TRANSACSVC
				NR_TRANSACAO.TRA_TRANSACAOSVC/init = NR_TRANSACAO.TRA_S_TRANSACSVC
				DT_TRANSACAO.TRA_TRANSACAOSVC/init = DT_TRANSACAO.TRA_S_TRANSACSVC
				retrieve/o "TRA_TRANSACAOSVC"
				if ($status = -7)
					retrieve/x "TRA_TRANSACAOSVC"
				elseif ($status = 0)
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transaçao %%vNrTransacao não validada!", "ADICIONAL=Operação->SICSVCO005.validaTransacao")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1) 
				endif
				IN_ENCARGOFIN.TRA_TRANSACAOSVC/init = !vInEncargoFin
			endif
		endif
		
		delitem vDsLstTransacao, 1
	until (vDsLstTransacao = "")
	
	poParams = ""
	vDsLstTransacao = ""
	
	if ($empty("TRA_TRANSACAOSVC") = 0)
		setocc "TRA_TRANSACAOSVC", 1
		while ($status >= 0)
			if (IN_ENCARGOFIN.TRA_TRANSACAOSVC = <TRUE>)
				if (vInCCusto = <TRUE>)
					vDsRegistro = ""
					putitem/id vDsRegistro, "CD_EMPRESA", CD_EMPRESA.TRA_TRANSACAOSVC
					putitem/id vDsRegistro, "NR_TRANSACAO", NR_TRANSACAO.TRA_TRANSACAOSVC
					putitem/id vDsRegistro, "DT_TRANSACAO", DT_TRANSACAO.TRA_TRANSACAOSVC
					putitem vDsLstTransacao, -1, vDsRegistro
				endif
			else
				vDsRegistro = ""
				putitem/id vDsRegistro, "CD_EMPRESA", CD_EMPRESA.TRA_TRANSACAOSVC
				putitem/id vDsRegistro, "NR_TRANSACAO", NR_TRANSACAO.TRA_TRANSACAOSVC
				putitem/id vDsRegistro, "DT_TRANSACAO", DT_TRANSACAO.TRA_TRANSACAOSVC
				putitem vDsLstTransacao, -1, vDsRegistro
			endif
			setocc "TRA_TRANSACAOSVC", $curocc("TRA_TRANSACAOSVC") + 1
		endwhile
	endif
	
	putitem/id poParams, "DS_LSTTRANSACAO", vDsLstTransacao
	
	exit(0)
end


;------------------------------------
public operation buscaTransacaoOrigem
;------------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	;Baseada em uma Transações, esta rotina retorna a outra transação associada a ela, caso exista,
	;seja na empresa ou no ccusto

	variables
		numeric vCdEmpresa, vNrTransacao, vCdEmpresaTra
		date vDtTransacao
		boolean vInDinheiro, vInEncargoFin, vInCCusto
	endvariables
	
	vCdEmpresa = $item("CD_EMPRESA", piParams)
	vNrTransacao = $item("NR_TRANSACAO", piParams)
	vDtTransacao = $item("DT_TRANSACAO", piParams)	

	if (vCdEmpresa = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa origem não informada!", "ADICIONAL=Operação->SICSVCO005.buscaTransacaoOrigem")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	if (vNrTransacao = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número transação origem não informado", "ADICIONAL=Operação->SICSVCO005.buscaTransacaoOrigem")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	if (vDtTransacao = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação origem não informada", "ADICIONAL=Operação->SICSVCO005.buscaTransacaoOrigem")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif

	clear/e "TRA_TRANSACAOSVC"
	CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
	NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
	DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
	retrieve/e "TRA_TRANSACAOSVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.buscaTransacaoOrigem")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1) 
	endif

	vCdEmpresaTra = ""

	clear/e "GER_EMPRESASVC"
	CD_EMPRESA.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
	retrieve/e "GER_EMPRESASVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa %%CD_EMPFAT.TRA_TRANSACAOSVC não cadastrada!", "ADICIONAL=Operação->SICSVCO005.buscaTransacaoOrigem")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	else
		if (CD_CCUSTO.GER_EMPRESASVC > 0)
			vCdEmpresaTra = CD_CCUSTO.GER_EMPRESASVC
		else
			clear/e "GER_EMPRESASVC"
			CD_CCUSTO.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
			retrieve/e "GER_EMPRESASVC"
			if ($status >= 0)
				vCdEmpresaTra = CD_EMPRESA.GER_EMPRESASVC
			endif
		endif    
	endif

	poParams = ""
	
	if (vCdEmpresaTra > 0)
		clear/e "TRA_TRANSACAOSVC"	
		CD_EMPFAT.TRA_TRANSACAOSVC/init = vCdEmpresaTra
		NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
		DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
		retrieve/e "TRA_TRANSACAOSVC"
		if ($status >= 0)	
			putitem/id poParams, "CD_EMPRESA", CD_EMPRESA.TRA_TRANSACAOSVC
			putitem/id poParams, "NR_TRANSACAO", NR_TRANSACAO.TRA_TRANSACAOSVC
			putitem/id poParams, "DT_TRANSACAO", DT_TRANSACAO.TRA_TRANSACAOSVC
		endif
	endif
	
	exit(0)
end

;-----------------------------
public operation buscaMaxTroco
	;-----------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	variables
		string vDsRegistro, vDsLstTransacao, vDsLstEncargoFin, vDsLstTra
		numeric vCdEmpresa, vNrTransacao, vVlMaxTroco, vCdEmpresaLogin
		date vDtTransacao
	endvariables
	
	;Verifica se existem transações de encargos a serem recebidas para então, verficar o
	;parâmetro de troco máximo. Caso so existam transações princopais, desconsidera o 
	;troco máximo, pois este so serve p/ orientar o recebimento com encargos
	
	vDsLstTransacao = $item("DS_LSTTRANSACAO", piParams)
	vDsLstEncargoFin = $item("DS_LSTENCARGOFIN", piParams)
	vCdEmpresaLogin = $item("CD_EMPRESA", $xlpg$)
	
	if (vDsLstTransacao = "") & (vDsLstEncargoFin = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Lista de transação não informada!", "ADICIONAL=Operação->SICSVCO005.buscaMaxTroco")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	call getParam(vCdEmpresaLogin, "buscaMaxTroco")
	if ($procerror)
		$instancehandle->SetStatus(<STS_ERRO>, $procerror, $procerrorcontext, "")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	if ($status < 0)
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	vVlMaxTroco = 0
	
	if ($tpTrocoMaximo$ > 0)
		if (vDsLstTransacao != "") & (vDsLstEncargoFin != "")            
			vDsLstTra = vDsLstTransacao
			repeat
				getitem vDsRegistro, vDsLstTra, 1
				vCdEmpresa = $item("CD_EMPRESA", vDsRegistro)
				vNrTransacao = $item("NR_TRANSACAO", vDsRegistro)
				vDtTransacao = $item("DT_TRANSACAO", vDsRegistro)                
				if (vCdEmpresa = 0)
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.buscaMaxTroco")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1)
				endif                
				if (vNrTransacao = 0)
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número da transação não informado!", "ADICIONAL=Operação->SICSVCO005.buscaMaxTroco")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1)
				endif                
				if (vDtTransacao = "")
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação não informada!", "ADICIONAL=Operação->SICSVCO005.buscaVlMaxTroco")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1)
				endif                
				clear/e "TRA_TRANSACAOSVC"
				CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
				NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
				DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
				retrieve/e "TRA_TRANSACAOSVC"
				if ($status < 0)
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.buscaMaxTroco")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1)
				endif
				vVlMaxTroco = vVlMaxTroco + VL_TOTAL.TRA_TRANSACAOSVC
				delitem vDsLstTra, 1
			until (vDsLstTra = "")            
			
			vDsLstTra = vDsLstEncargoFin
			repeat
				getitem vDsRegistro, vDsLstTra, 1
				vCdEmpresa = $item("CD_EMPRESA", vDsRegistro)
				vNrTransacao = $item("NR_TRANSACAO", vDsRegistro)
				vDtTransacao = $item("DT_TRANSACAO", vDsRegistro)                
				if (vCdEmpresa = 0)
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.buscaMaxTroco")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1)
				endif                
				if (vNrTransacao = 0)
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número da transação não informado!", "ADICIONAL=Operação->SICSVCO005.buscaMaxTroco")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1)
				endif                
				if (vDtTransacao = "")
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação não informada!", "ADICIONAL=Operação->SICSVCO005.buscaVlMaxTroco")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1)
				endif                
				clear/e "TRA_TRANSACAOSVC"
				CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
				NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
				DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
				retrieve/e "TRA_TRANSACAOSVC"
				if ($status < 0)
					$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.buscaMaxTroco")
					poCdErro = $xCdErro$
					poCtxErro = $xCtxErro$
					exit(-1)
				endif
				vVlMaxTroco = vVlMaxTroco + VL_TOTAL.TRA_TRANSACAOSVC
				delitem vDsLstTra, 1
			until (vDsLstTra = "")
		else
			$tpTrocoMaximo$ = 0
		endif
	endif
	
	poParams = ""
	putitem/id poParams, "TP_TROCOMAXIMO", $tpTrocoMaximo$    
	putitem/id poParams, "VL_TROCOMAXIMOTRA", 0
	putitem/id poParams, "VL_TROCOMAXIMOENC", vVlMaxTroco
	
	exit(0)
end

;---------------------------------
public operation validaVlMaxTroco
	;---------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	variables
		numeric vVlMaxTroco, vVlReceber, vVlRecebido, vVlChequeVista, vVlDinheiro, vVlTroco
	endvariables
	
	;Valida os valores de uma transação mais os da sua coligada na empresa principal
	;Esta é a mesma validaçã feita pelo TRAFM066, só que é separado devido ao agrupamento
	;das transações
	
	vVlMaxTroco = $item("VL_MAXTROCO", piParams)
	vVlReceber = $item("VL_RECEBER", piParams)
	vVlRecebido = $item("VL_RECEBIDO", piParams)
	vVlChequeVista = $item("VL_CHEQUEVISTA", piParams)
	vVlDinheiro = $item("VL_DINHEIRO", piParams)
	
	;Indica que esta sendo validando o recebimento das trasanções principais
	;Neste caso o valor total do recebimento tem que ser igual o valor e a receber 
	;e em dinheiro
	if (vVlMaxTroco = 0)
		if (vVlRecebido != vVlReceber)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Valor recebido diferente do valor a receber!", "ADICIONAL=Operação->SICSVCO005.validaVlMaxTroco")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif
		if (vVlDinheiro != vVlRecebido)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Valor recebido deve ser somente em dinheiro!", "ADICIONAL=Operação->SICSVCO005.validaVlMaxTroco")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif
		exit(0)
	endif
	
	if (vVlRecebido < vVlMaxTroco)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Valor recebido menor que o valor a receber!", "ADICIONAL=Operação->SICSVCO005.validaVlMaxTroco")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	vVlTroco = 0
	if (vVlRecebido > vVlMaxTroco)
		vVlTroco = vVlRecebido - vVlMaxTroco
	endif
	
	if (vVlTroco > 0)
		if (vVlDinheiro > 0)
			if (vVlTroco > vVlDinheiro)
				$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Valor de troco maior que o valor em dinheiro!", "ADICIONAL=Operação->SICSVCO005.validaVlMaxTroco")
				poCdErro = $xCdErro$
				poCtxErro = $xCtxErro$
				exit(-1)
			endif
		elseif (vVlChequeVista > 0)
			if (vVlTroco > vVlChequeVista)
				$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Valor de troco maior que o valor em cheque à vista!", "ADICIONAL=Operação->SICSVCO005.validaVlMaxTroco")
				poCdErro = $xCdErro$
				poCtxErro = $xCtxErro$
				exit(-1)
			endif
		else
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Valor de troco inválido! Não existe valor em dinheiro nem valor em cheque à vista!", "ADICIONAL=Operação->SICSVCO005.validaVlMaxTroco")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif
	endif
	
	exit(0)
end

;---------------------------
public operation validaTroca
;---------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams

	variables
		numeric vCdEmpresa, vNrTransacao, vNrDias
		date vDtTransacao, vDtPrevEntrega
	endvariables

	;Valida uma transação de troca de modo que aceite somente desconto de encargos de 100%
	;Caso existe desconto diferente de 0 ou 100% retorna erro

	vCdEmpresa = $item("CD_EMPRESA", piParams)
	vNrTransacao = $item("NR_TRANSACAO", piParams)
	vDtTransacao = $item("DT_TRANSACAO", piParams)
	vDtPrevEntrega = $item("DT_PREVENTREGA", piParams)

	if (vCdEmpresa = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.validaTroca")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	if (vNrTransacao = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número da transação não informado!", "ADICIONAL=Operação->SICSVCO005.validaTroca")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	if (vDtTransacao = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data da transação não informada!", "ADICIONAL=Operação->SICSVCO005.validaTroca")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif

	clear/e "TRA_TRANSACAOSVC"
	CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
	NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
	DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
	retrieve/e "TRA_TRANSACAOSVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.validaTroca")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif

	if (TP_MODALIDADE.GER_OPERACAOSVC != 4 & TP_MODALIDADE.GER_OPERACAOSVC != 8) | (TP_OPERACAO.TRA_TRANSACAOSVC != "S")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não é de troca!", "ADICIONAL=Operação->SICSVCO005.validaTroca")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif

	if (vDtPrevEntrega != "")
		vNrDias = vDtPrevEntrega - vDtTransacao
		if (vNrDias != 100) & (vNrDias != 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação de troca %%vNrTransacao não pode ter previsão de entrega!", "ADICIONAL=Operação->SICSVCO005.validaTroca")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif	
	endif

	exit(0)
end

;-----------------------------------
public operation buscaVlBrutoLiquido
	;-----------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	variables
		string vDsRegistro, vDsLstTransacao, vDsLstTra
		numeric vCdEmpresa, vNrTransacao, vVlTrocoMaximo, vVlTotalBruto, vVlTotalLiquido
		date vDtTransacao
		boolean vInTrocoMaximo
	endvariables
	
	;Retorna o valor total bruto e liquido de uma lista de transações
	;Caso esta lista esteja enquandrada no esquema de troco maximo, ele retorna
	;o valor somando incluisive com as transações associadas
	
	vDsLstTransacao = $item("DS_LSTTRANSACAO", piParams)
	vInTrocoMaximo = $item("IN_TROCOMAXIMO", piParams)
	vVlTrocoMaximo = $item("VL_TROCOMAXIMO", piParams)
	
	if (vDsLstTransacao = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Lista de transação não informada!", "ADICIONAL=Operação->SICSVCO005.buscaVlBrutoLiquido")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	vVlTotalBruto = 0
	vVlTotalLiquido = 0
	
	vDsLstTra = vDsLstTransacao
	repeat
		getitem vDsRegistro, vDsLstTra, 1
		vCdEmpresa = $item("CD_EMPRESA", vDsRegistro)
		vNrTransacao = $item("NR_TRANSACAO", vDsRegistro)
		vDtTransacao = $item("DT_TRANSACAO", vDsRegistro)                
		if (vCdEmpresa = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.buscaVlBrutoLiquido")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif                
		if (vNrTransacao = 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número da transação não informado!", "ADICIONAL=Operação->SICSVCO005.buscaVlBrutoLiquido")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif                
		if (vDtTransacao = "")
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação não informada!", "ADICIONAL=Operação->SICSVCO005.buscaVlBrutoLiquido")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif                
		clear/e "TRA_TRANSACAOSVC"
		CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
		NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
		DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
		retrieve/e "TRA_TRANSACAOSVC"
		if ($status < 0)
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.buscaVlBrutoLiquido")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			exit(-1)
		endif
		vVlTotalBruto = vVlTotalBruto + (VL_TOTAL.TRA_TRANSACAOSVC + VL_DESCONTO.TRA_TRANSACAOSVC)
		vVlTotalLiquido = vVlTotalLiquido + VL_TOTAL.TRA_TRANSACAOSVC
		
		if (vInTrocoMaximo = <TRUE>) & (vVlTrocoMaximo > 0)
			clear/e "GER_EMPRESASVC"
			CD_EMPRESA.GER_EMPRESASVC/init = CD_EMPRESA.TRA_TRANSACAOSVC 
			retrieve/e "GER_EMPRESASVC"
			if ($status >= 0)
				if (CD_CCUSTO.GER_EMPRESASVC > 0)
					clear/e "TRA_TRANSACAOSVC"
					CD_EMPRESA.TRA_TRANSACAOSVC/init = CD_CCUSTO.GER_EMPRESASVC
					NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
					DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
					retrieve/e "TRA_TRANSACAOSVC"
					if ($status >= 0)
						vVlTotalBruto = vVlTotalBruto + (VL_TOTAL.TRA_TRANSACAOSVC + VL_DESCONTO.TRA_TRANSACAOSVC)
						vVlTotalLiquido = vVlTotalLiquido + VL_TOTAL.TRA_TRANSACAOSVC
					endif
				endif
			endif
		endif
		
		delitem vDsLstTra, 1
	until (vDsLstTra = "")    

	poParams = ""
	putitem/id poParams, "VL_TOTALBRUTO", vVlTotalBruto
	putitem/id poParams, "VL_TOTALLIQUIDO", vVlTotalLiquido
	
	exit(0)
end

;-------------------------------------
public operation arredondaQtFracionada
;-------------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	variables
		string viParams, voParams
		numeric vCdEmpresa, vNrTransacao, vNrItem, vQtSolicitada
		date vDtTransacao
	endvariables

	;Recebe um item de transação(principalmente compras) e verifica se a existe o outro item
	;na empresa relacionada p/ buscar a quantidade, pois quando o desconto é no valor,
	;a transação do centro de custo fica sem quantidade somente com valor

	vCdEmpresa = $item("CD_EMPRESA", piParams)
	vNrTransacao = $item("NR_TRANSACAO", piParams)
	vDtTransacao = $item("DT_TRANSACAO", piParams)
	vNrItem = $item("NR_ITEM", piParams)
	
	if (vCdEmpresa = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vNrTransacao = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número transação não informado!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vDtTransacao = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação não informada!", "ADICIONAL=Operação-SICSVCO005.arredondaQtFracionada")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vNrItem = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Item da transação não informado!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif

	clear/e "TRA_TRANSITEMSVC"
	CD_EMPRESA.TRA_TRANSITEMSVC/init = vCdEmpresa
	NR_TRANSACAO.TRA_TRANSITEMSVC/init = vNrTransacao
	DT_TRANSACAO.TRA_TRANSITEMSVC/init = vDtTransacao
	NR_ITEM.TRA_TRANSITEMSVC/init = vNrItem
	retrieve/e "TRA_TRANSITEMSVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Item  %%vNrItem da transação %%vNrTransacao não cadastrado!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1) 
	endif

	vQtSolicitada = 0

	if (QT_SOLICITADA.TRA_TRANSITEMSVC > 0)
		vQtSolicitada = QT_SOLICITADA.TRA_TRANSITEMSVC
	else
		clear/e "GER_EMPRESASVC"
		CD_EMPRESA.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSITEMSVC
		retrieve/e "GER_EMPRESASVC"
		if ($status >= 0)
			if (CD_CCUSTO.GER_EMPRESASVC > 0)
				clear/e "TRA_TRANSITEMSVC"
				CD_EMPRESA.TRA_TRANSITEMSVC/init = CD_CCUSTO.GER_EMPRESASVC
				NR_TRANSACAO.TRA_TRANSITEMSVC/init = vNrTransacao
				DT_TRANSACAO.TRA_TRANSITEMSVC/init = vDtTransacao
				NR_ITEM.TRA_TRANSITEMSVC/init = vNrItem
				retrieve/e "TRA_TRANSITEMSVC"
				if ($status >= 0)
					vQtSolicitada = QT_SOLICITADA.TRA_TRANSITEMSVC
				endif
			endif
		endif		
	endif

	poParams = ""
	putitem/id poParams, "QT_SOLICITADA", vQtSolicitada

	return(0)
end

;------------------------------
public operation arredondaCusto
;------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	variables
		string viParams, voParams, vTpValor, vDsCustoSubstTributario, vDsCustoValorRetido
		numeric vCdEmpresa, vNrFatura, vNrItem, vCdProduto, vCdValor, vVlUnitario
		numeric vVlCalc, vCdMotivo, vVlIPI, vCdCustoSemImp, vQtFaturado, vCdCustoMedioSemImp
		date vDtFatura
		boolean vInPDVOtimizado, vInSoConsulta
	endvariables

	;Recebe um item valor de NF(principalmente compras) e verifica caso seja item
	;de centro de custo, acha o item relacionado na empresa e soma os valores, retornando
	;assim o custo real do produto(empresa + centro de custo)
	;Caso seja um valor de uma NF empresa, ele verifica se existe um NF correspondente,
	;caso nao exista, ele atualiza o preco no centro de custo p/ que la sempre fique o
	;valor real de custo do produto

	vCdEmpresa = $item("CD_EMPRESA", piParams)
	vNrFatura = $item("NR_FATURA", piParams)
	vDtFatura = $item("DT_FATURA", piParams)
	vNrItem = $item("NR_ITEM", piParams)
	vCdProduto = $item("CD_PRODUTO", piParams)
	vTpValor = $item("TP_VALOR", piParams)
	vCdValor = $item("CD_VALOR", piParams)
	vCdMotivo = $item("CD_MOTIVO", piParams)
	vCdCustoSemImp = $item("CD_CUSTO_S_IMPOSTO", piParams)
	vCdCustoMedioSemImp = $item("CD_CUSTO_MEDIO_S_IMPOSTO", piParams)
	vInPDVOtimizado = $item("IN_PDV_OTIMIZADO", piParams)
	vInSoConsulta = $item("IN_SO_CONSULTA", piParams)
	;---Elia Proj. 102/357 09/10/08
	vDsCustoSubstTributario = $item("DS_CUSTO_SUBST_TRIBUTARIA", piParams)
	scan(vDsCustoSubstTributario,";")
	vDsCustoSubstTributario = vDsCustoSubstTributario[1,$result - 1]

	vDsCustoValorRetido = $item("DS_CUSTO_VALOR_RETIDO", piParams)
	scan(vDsCustoValorRetido,";")
	vDsCustoValorRetido = vDsCustoValorRetido[1,$result - 1]
	;

	if (vCdEmpresa = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.arredondaCusto")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vNrFatura = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número sequencial da NF não informado!", "ADICIONAL=Operação->SICSVCO005.arredondaCusto")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vDtFatura = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data da NF não informada!", "ADICIONAL=Operação-SICSVCO005.arredondaCusto")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vNrItem = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número do item da NF não informado!", "ADICIONAL=Operação->SICSVCO005.arredondaCusto")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif

	if (vCdProduto = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Produto não informado!", "ADICIONAL=Operação->SICSVCO005.arredondaCusto")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif

	if (vTpValor = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Tipo de valor não informado!", "ADICIONAL=Operação->SICSVCO005.arredondaCusto")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif

	if (vCdValor = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Código do valor não informado!", "ADICIONAL=Operação->SICSVCO005.arredondaCusto")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif

	call getParam($item("CD_EMPRESA", $xlpg$), "arredondaCusto")
	if ($procerror)
		$instancehandle->SetStatus(<STS_ERRO>, $procerror, $procerrorcontext, "")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	if ($status < 0)
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		exit(-1)
	endif
	
	clear/e "FIS_NFITEMPROSVC"
	CD_EMPRESA.FIS_NFITEMPROSVC/init = vCdEmpresa
	NR_FATURA.FIS_NFITEMPROSVC/init = vNrFatura
	DT_FATURA.FIS_NFITEMPROSVC/init = vDtFatura
	NR_ITEM.FIS_NFITEMPROSVC/init = vNrItem
	CD_PRODUTO.FIS_NFITEMPROSVC/init = vCdProduto
	retrieve/e "FIS_NFITEMPROSVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "Item/Produto  %%vNrItem%%%/%%vCdProduto da NF %%vNrFatura não cadastrado!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1) 
	endif

	clear/e "FIS_NFSVC"
	CD_EMPRESA.FIS_NFSVC/init = vCdEmpresa
	NR_FATURA.FIS_NFSVC/init = vNrFatura
	DT_FATURA.FIS_NFSVC/init = vDtFatura
	retrieve/e "FIS_NFSVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "NF %%vNrFatura não cadastrado!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1) 
	endif

	vQtFaturado = QT_FATURADO.FIS_NFITEMPROSVC

	clear/e "FIS_NFITEMVLSVC"
	CD_EMPRESA.FIS_NFITEMVLSVC/init = vCdEmpresa
	NR_FATURA.FIS_NFITEMVLSVC/init = vNrFatura
	DT_FATURA.FIS_NFITEMVLSVC/init = vDtFatura
	NR_ITEM.FIS_NFITEMVLSVC/init = vNrItem
	CD_PRODUTO.FIS_NFITEMVLSVC/init = vCdProduto
	TP_VALOR.FIS_NFITEMVLSVC/init = vTpValor
	CD_VALOR.FIS_NFITEMVLSVC/init = vCdValor
	retrieve/e "FIS_NFITEMVLSVC"
	if ($status < 0)
		if (vTpValor = "C") ;Custo
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Custo %%vCdProduto do item  %%vNrItem da NF %%vNrFatura não cadastrado!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		else
			$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Preco %%vCdProduto do item  %%vNrItem da NF %%vNrFatura não cadastrado!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		endif
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1) 
	endif

	vVlUnitario = VL_UNITARIO.FIS_NFITEMVLSVC	

	
	vVlIPI = 0
	;---Elia Proj. 102/357 09/10/08
	;if (TP_VALOR.FIS_NFITEMVLSVC = "C") & (CD_VALOR.FIS_NFITEMVLSVC = vCdCustoSemImp | CD_VALOR.FIS_NFITEMVLSVC = vCdCustoMedioSemImp)
	if (TP_VALOR.FIS_NFITEMVLSVC = "C") & (CD_VALOR.FIS_NFITEMVLSVC = vCdCustoSemImp | CD_VALOR.FIS_NFITEMVLSVC = vCdCustoMedioSemImp | CD_VALOR.FIS_NFITEMVLSVC = vDsCustoSubstTributario | CD_VALOR.FIS_NFITEMVLSVC = vDsCustoValorRetido)
		;>-- MAC - PRJ 156/344 - 04/06/2010 ---
		if ($inAgregaIpi$ = 3) | ($inAgregaIpi$ = 4)
			clear/e "FIS_NFITEMIMPSVC"
			CD_EMPRESA.FIS_NFITEMIMPSVC/init = vCdEmpresa
			NR_FATURA.FIS_NFITEMIMPSVC/init = vNrFatura
			DT_FATURA.FIS_NFITEMIMPSVC/init = vDtFatura
			NR_ITEM.FIS_NFITEMIMPSVC/init = vNrItem
			CD_IMPOSTO.FIS_NFITEMIMPSVC/init = 3 ;IPI
			retrieve/e "FIS_NFITEMIMPSVC"
			if ($status >= 0)
;				vVlCalc = VL_UNITARIO.FIS_NFITEMVLSVC * PR_ALIQUOTA.FIS_NFITEMIMPSVC / 100
;				vVLIPI = vVlCalc[round, 6]
				vVlCalc = VL_IMPOSTO.FIS_NFITEMIMPSVC / vQtFaturado
				vVLIPI = vVlCalc[round, 6]
			endif
		endif
	else
		if ($inAgregaIpi$ = 1) | ($inAgregaIpi$ = 4)
		;if ($inAgregaIpi$ != 2)
		;--<
			clear/e "FIS_NFITEMIMPSVC"
			CD_EMPRESA.FIS_NFITEMIMPSVC/init = vCdEmpresa
			NR_FATURA.FIS_NFITEMIMPSVC/init = vNrFatura
			DT_FATURA.FIS_NFITEMIMPSVC/init = vDtFatura
			NR_ITEM.FIS_NFITEMIMPSVC/init = vNrItem
			CD_IMPOSTO.FIS_NFITEMIMPSVC/init = 3 ;IPI
			retrieve/e "FIS_NFITEMIMPSVC"
			if ($status >= 0)
;				vVlCalc = VL_UNITARIO.FIS_NFITEMVLSVC * PR_ALIQUOTA.FIS_NFITEMIMPSVC / 100
;				vVLIPI = vVlCalc[round, 6]
				vVlCalc = VL_IMPOSTO.FIS_NFITEMIMPSVC / vQtFaturado
				vVLIPI = vVlCalc[round, 6]
			endif
		endif	
	endif

	if (QT_FATURADO.FIS_NFITEMPROSVC = 0)
		clear/e "GER_EMPRESASVC"
		CD_EMPRESA.GER_EMPRESASVC/init = CD_EMPFAT.FIS_NFITEMPROSVC
		retrieve/e "GER_EMPRESASVC"
		if ($status >= 0)
			if (CD_CCUSTO.GER_EMPRESASVC > 0)
				clear/e "FIS_NFITEMPROSVC"
				CD_EMPRESA.FIS_NFITEMPROSVC/init = CD_CCUSTO.GER_EMPRESASVC
				NR_FATURA.FIS_NFITEMPROSVC/init = vNrFatura
				DT_FATURA.FIS_NFITEMPROSVC/init = vDtFatura
				NR_ITEM.FIS_NFITEMPROSVC/init = vNrItem
				CD_PRODUTO.FIS_NFITEMPROSVC/init = vCdProduto
				retrieve/e "FIS_NFITEMPROSVC"
				if ($status >= 0)
					vQtFaturado = QT_FATURADO.FIS_NFITEMPROSVC
				endif
				clear/e "FIS_NFITEMVLSVC"
				CD_EMPRESA.FIS_NFITEMVLSVC/init = CD_CCUSTO.GER_EMPRESASVC
				NR_FATURA.FIS_NFITEMVLSVC/init = vNrFatura
				DT_FATURA.FIS_NFITEMVLSVC/init = vDtFatura
;				NR_ITEM.FIS_NFITEMVLSVC/init = vNrItem
				CD_PRODUTO.FIS_NFITEMVLSVC/init = vCdProduto
				TP_VALOR.FIS_NFITEMVLSVC/init = vTpValor
				CD_VALOR.FIS_NFITEMVLSVC/init = vCdValor
				retrieve/e "FIS_NFITEMVLSVC"
				if ($status >= 0)
					vVlUnitario = vVlUnitario + VL_UNITARIO.FIS_NFITEMVLSVC
					if (TP_VALOR.FIS_NFITEMVLSVC = "C") & (CD_VALOR.FIS_NFITEMVLSVC = vCdCustoSemImp | CD_VALOR.FIS_NFITEMVLSVC = vCdCustoMedioSemImp)
						
						;>-- MAC - PRJ 156/344 - 04/06/2010 ---
						if ($inAgregaIpi$ = 3) | ($inAgregaIpi$ = 4)
							clear/e "FIS_NFITEMIMPSVC"
							CD_EMPRESA.FIS_NFITEMIMPSVC/init = vCdEmpresa
							NR_FATURA.FIS_NFITEMIMPSVC/init = vNrFatura
							DT_FATURA.FIS_NFITEMIMPSVC/init = vDtFatura
							NR_ITEM.FIS_NFITEMIMPSVC/init = vNrItem
							CD_IMPOSTO.FIS_NFITEMIMPSVC/init = 3 ;IPI
							retrieve/e "FIS_NFITEMIMPSVC"
							if ($status >= 0)
;								vVlCalc = VL_UNITARIO.FIS_NFITEMVLSVC * PR_ALIQUOTA.FIS_NFITEMIMPSVC / 100
;								vVLIPI = vVlCalc[round, 6]
								vVlCalc = VL_IMPOSTO.FIS_NFITEMIMPSVC / vQtFaturado
								vVLIPI = vVlCalc[round, 6]
							endif
						endif
					else
						if ($inAgregaIpi$ = 1) | ($inAgregaIpi$ = 4)
						;if ($inAgregaIpi$ != 2)
						;--<
							clear/e "FIS_NFITEMIMPSVC"
							CD_EMPRESA.FIS_NFITEMIMPSVC/init = CD_CCUSTO.GER_EMPRESASVC
							NR_FATURA.FIS_NFITEMIMPSVC/init = vNrFatura
							DT_FATURA.FIS_NFITEMIMPSVC/init = vDtFatura
							NR_ITEM.FIS_NFITEMIMPSVC/init = NR_ITEM.FIS_NFITEMVLSVC
							CD_IMPOSTO.FIS_NFITEMIMPSVC/init = 3 ;IPI
							retrieve/e "FIS_NFITEMIMPSVC"
							if ($status >= 0)
;								vVlCalc = VL_UNITARIO.FIS_NFITEMVLSVC * PR_ALIQUOTA.FIS_NFITEMIMPSVC / 100
;								vVlIPI = vVlIPI + vVlCalc[round, 6]
								vVlCalc = VL_IMPOSTO.FIS_NFITEMIMPSVC / vQtFaturado
								vVlIPI = vVlIPI + vVlCalc[round, 6]
							endif
						endif
					endif
				endif
			endif
		endif
	else
		if (vInsoConsulta != <TRUE>)	
			clear/e "GER_EMPRESASVC"
			CD_CCUSTO.GER_EMPRESASVC/init = CD_EMPFAT.FIS_NFITEMPROSVC
			retrieve/e "GER_EMPRESASVC"
			if ($status >= 0)
				if (NR_TRANSACAOORI.FIS_NFSVC > 0)
					clear/e "TRA_TRANSACAOSVC"
					CD_EMPRESA.TRA_TRANSACAOSVC/init = CD_EMPRESA.GER_EMPRESASVC
					NR_TRANSACAO.TRA_TRANSACAOSVC/init = NR_TRANSACAOORI.FIS_NFSVC
					DT_TRANSACAO.TRA_TRANSACAOSVC/init = DT_TRANSACAOORI.FIS_NFSVC
					retrieve/e "TRA_TRANSACAOSVC"
					;thamati 02/09/2009 [Proj. 0148 - Tar. 0354]
					;if ($status < 0) 
					if ($status < 0) | (vInPDVOtimizado)
					;
						viParams = ""
						vVlCalc = vVlUnitario - (vVlUnitario * PR_DESCONTO.FIS_NFITEMVLSVC / 100) 
						vVlCalc = vVlCalc[round,6]
						vVlCalc = vVlCalc - (vVlCalc * PR_DESCONTOCAB.FIS_NFITEMVLSVC / 100)
						vVlCalc = vVlCalc[round,6]
						vVlCalc = vVlCalc + vVlIPI
						putitem/id viParams, "CD_EMPRESA", CD_EMPRESA.GER_EMPRESASVC
						putitem/id viParams, "CD_PRODUTO", CD_PRODUTO.FIS_NFITEMPROSVC
						putitem/id viParams, "TP_VALOR", TP_VALOR.FIS_NFITEMVLSVC
						putitem/id viParams, "CD_VALOR", CD_VALOR.FIS_NFITEMVLSVC
						putitem/id viParams, "VL_PRODUTOATU", vVlCalc
						putitem/id viParams, "CD_MOTIVO", vCdMotivo
						activate "PRDSVCO007".atualizaValor($xlpg$, viParams, voParams, $xCdErro$, $xCtxerro$)
						if ($procerror)       
							$instancehandle->SetStatus(<STS_ERRO>, $procerror, $procerrorcontext, "")
							poCdErro = $xCdErro$
							poCtxErro = $xCtxErro$
							return(-1) 
						elseif ($xCdErro$)
							$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=%%$item("DESCRICAO", $xCtxErro$)", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
							poCdErro = $xCdErro$
							poCtxErro = $xCtxErro$
							return(-1) 
						endif
					endif
				endif
			endif
		endif
	endif

	poParams = ""
	putitem/id poParams, "VL_UNITARIO", vVlUnitario	
	putitem/id poParams, "VL_IPI", vVlIPI
	putitem/id poParams, "QT_FATURADO", vQtFaturado

	return(0)
end

;------------------------------
public operation buscaSequencia
;------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	variables
		string viParams, voParams
		numeric vCdEmpresa, vNrTransacao, vNrFatura
		date vDtTransacao
	endvariables

	;Recebe uma transsacao e verifica se esta possui uma outra associada. Caso exista,
	;verifica se esta encerrada/atendida p/ retornar o mesmo numero de fatura p/ que 
	;as NFs das duas empresa fiquem iguais
	;Caso nao exista, retorna um numero sequencial normal
	;Esta rotina deve ser utilizada somente p/ NFs de emissao de terceiros

	vCdEmpresa = $item("CD_EMPRESA", piParams)
	vNrTransacao = $item("NR_TRANSACAO", piParams)
	vDtTransacao = $item("DT_TRANSACAO", piParams)
	
	if (vCdEmpresa = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.buscaSequencia")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vNrTransacao = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número transação não informado!", "ADICIONAL=Operação->SICSVCO005.buscaSequencia")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vDtTransacao = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação não informada!", "ADICIONAL=Operação-SICSVCO005.buscaSequencia")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	clear/e "TRA_TRANSACAOSVC"
	CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
	NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
	DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
	retrieve/e "TRA_TRANSACAOSVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1) 
	endif

	vNrFatura = 0

	if (TP_ORIGEMEMISSAO.TRA_TRANSACAOSVC = 2) ;Emissão terceiros
		vCdEmpresa = 0
		clear/e "GER_EMPRESASVC"
		CD_CCUSTO.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
		retrieve/e "GER_EMPRESASVC"
		if ($status >= 0)
			vCdEmpresa = CD_EMPRESA.GER_EMPRESASVC
		else
			clear/e "GER_EMPRESASVC"
			CD_EMPRESA.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
			retrieve/e "GER_EMPRESASVC"
			if ($status >= 0)
				if (CD_CCUSTO.GER_EMPRESASVC > 0)
					vCdEmpresa = CD_CCUSTO.GER_EMPRESASVC
				endif
			endif
		endif

		if (vCdEmpresa > 0)
			clear/e "TRA_TRANSACAOSVC"
			CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
			NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
			DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
			retrieve/e "TRA_TRANSACAOSVC"
			if ($status >= 0)
				clear/e "FIS_NFSVC"
				CD_EMPRESAORI.FIS_NFSVC/init = CD_EMPRESA.TRA_TRANSACAOSVC
				NR_TRANSACAOORI.FIS_NFSVC/init = NR_TRANSACAO.TRA_TRANSACAOSVC
				DT_TRANSACAOORI.FIS_NFSVC/init = DT_TRANSACAO.TRA_TRANSACAOSVC
				retrieve/e "FIS_NFSVC"
				if ($status >= 0)
					vNrFatura = NR_FATURA.FIS_NFSVC
				endif
			endif
		endif
	endif

	if (vNrFatura = 0)
		viParams = ""
		putitem/id viParams, "NM_ENTIDADE", "FIS_NF"	
		activate "GERSVCO031".getNumSeq($xlpg$, viParams, voParams, $xCdErro$, $xCtxerro$)
		if ($procerror)
			$instancehandle->SetStatus(<STS_ERRO>, $procerror, $procerrorcontext, "")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1)
		elseif ($status < 0)
			$instancehandle->SetStatus(<STS_ERRO>, $xCdErro$, $xCtxErro$, "")
			poCdErro = $xCdErro$
			poCtxErro = $xCtxErro$
			return(-1)
		endif    
		vNrFatura = $item("NR_SEQUENCIA", voParams)
	endif

	poParams = ""
	putitem/id poParams, "NR_FATURA", vNrFatura

	return(0)
end

;--------------------------------------
public operation validaNumeroTransacao
;MOda Projeto 51-18
;Chamada: TRAFM050 operation(validaTransacao)
;--------------------------------------
	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	variables
		string viParams, voParams
		numeric vCdEmpresa, vNrTransacao, vNrFatura
		date vDtTransacao
		boolean vInDuplicado
	endvariables
	;Recebe uma transacao e verifica se esta possui uma outra associada em andamento no centro de custo.
	;Caso exista, retorna IN_DUPLICADO = <TRUE> se não existir IN_DUPLICADO = <FALSE>
	;Esta rotina deve ser utilizada somente p/ NFs de emissao de terceiros

	vCdEmpresa = $item("CD_EMPRESA", piParams)
	vNrTransacao = $item("NR_TRANSACAO", piParams)
	vDtTransacao = $item("DT_TRANSACAO", piParams)
	vInDuplicado = <FALSE>	

	if (vCdEmpresa = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.buscaSequencia")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vNrTransacao = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número transação não informado!", "ADICIONAL=Operação->SICSVCO005.buscaSequencia")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vDtTransacao = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação não informada!", "ADICIONAL=Operação-SICSVCO005.buscaSequencia")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	clear/e "TRA_TRANSACAOSVC"
	CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
	NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
	DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
	retrieve/e "TRA_TRANSACAOSVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.arredondaQtFracionada")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1) 
	endif

	if (TP_ORIGEMEMISSAO.TRA_TRANSACAOSVC = 2) ;Emissão terceiros
		vCdEmpresa = 0
		clear/e "GER_EMPRESASVC"
		CD_CCUSTO.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
		retrieve/e "GER_EMPRESASVC"
		if ($status >= 0)
			vInDuplicado = <FALSE>
		else
			clear/e "GER_EMPRESASVC"
			CD_EMPRESA.GER_EMPRESASVC/init = CD_EMPFAT.TRA_TRANSACAOSVC
			retrieve/e "GER_EMPRESASVC"
			if ($status >= 0)
				if (CD_CCUSTO.GER_EMPRESASVC > 0)
					vCdEmpresa = CD_CCUSTO.GER_EMPRESASVC
				endif
			endif
		endif
		if (vCdEmpresa > 0)
			clear/e "TRA_TRANSACAOSVC"
			CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
			NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
			DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
			retrieve/e "TRA_TRANSACAOSVC"
			if($status >= 0)
				if(TP_SITUACAO.TRA_TRANSACAOSVC = 1);em andamento
					vInDuplicado = <TRUE>
				endif
			endif
		endif

	endif	

	poParams = ""
	putitem/id poParams, "IN_DUPLICADO", vInDuplicado
	
	exit(0)

end

;--------------------------------------
public operation validaTransacaoDefeito
;--------------------------------------
;verificar se existe uma transação irmã na encargos ou vice-versa
;e retornar um flag indicativo dizendo se encontrou ou não uma transação irmã

	params
		string  $xlpg$      :IN    
		string  piParams    :IN
		string  poParams    :OUT
		string  poCdErro    :OUT
		string  poCtxErro   :OUT
	endparams
	
	variables
		numeric vCdEmpresa, vNrTransacao, vCdEmpresaLogin, vCdEmpresaTra
		date vDtTransacao
		boolean vInCCusto, vInTransacao, vInValido
	endvariables
	
	vCdEmpresa = $item("CD_EMPRESA", piParams)
	vNrTransacao = $item("NR_TRANSACAO", piParams)
	vDtTransacao = $item("DT_TRANSACAO", piParams)
	
	if (vCdEmpresa = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa não informada!", "ADICIONAL=Operação->SICSVCO005.validaTransacaoDefeito")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	if (vNrTransacao = 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Número da transação não informado!", "ADICIONAL=Operação->SICSVCO005.validaTransacaoDefeito")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1) 
	endif
	
	if (vDtTransacao = "")
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Data transação não informada!", "ADICIONAL=Operação->SICSVCO005.validaTransacaoDefeito")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	endif
	
	vCdEmpresaLogin = $item("CD_EMPRESA", $xlpg$)
	vInCCusto = <FALSE>
	vInTransacao = <FALSE>
	vInValido = <TRUE>
	
	clear/e "TRA_TRANSACAOSVC"
	CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresa
	NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
	DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
	retrieve/e "TRA_TRANSACAOSVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Transação %%vNrTransacao não cadastrada!", "ADICIONAL=Operação->SICSVCO005.validaTransacaoDefeito")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1) 
	endif
	
	vCdEmpresaTra = 0		
	
	clear/e "GER_EMPRESASVC"
	CD_EMPRESA.GER_EMPRESASVC/init = vCdEmpresaLogin
	retrieve/e "GER_EMPRESASVC"
	if ($status < 0)
		$instancehandle->SetStatus(<STS_ERRO>, "GEN0001", "DESCRICAO=Empresa %%CD_EMPFAT.TRA_TRANSACAOSVC não cadastrada!", "ADICIONAL=Operação->SICSVCO005.validaTransacaoDefeito")
		poCdErro = $xCdErro$
		poCtxErro = $xCtxErro$
		return(-1)
	else
		if (CD_CCUSTO.GER_EMPRESASVC > 0)
			vCdEmpresaTra = CD_CCUSTO.GER_EMPRESASVC
			vInCCusto = <TRUE>
		else
			if (CD_EMPFAT.TRA_TRANSACAOSVC = vCdEmpresaLogin)
				vCdEmpresaTra = CD_EMPFAT.TRA_TRANSACAOSVC
			endif
		endif
	endif
	
	if (vCdEmpresaTra > 0)
		clear/e "TRA_TRANSACAOSVC"
		CD_EMPRESA.TRA_TRANSACAOSVC/init = vCdEmpresaTra
		NR_TRANSACAO.TRA_TRANSACAOSVC/init = vNrTransacao
		DT_TRANSACAO.TRA_TRANSACAOSVC/init = vDtTransacao
		retrieve/e "TRA_TRANSACAOSVC"
		if ($status >= 0)
			vInTransacao = <TRUE>
		else
			vCdEmpresaTra = 0
		endif
	endif
	
	if (vInCCusto = <FALSE>) & (vInTransacao = <TRUE>)
		vInValido = <FALSE>
	endif
	
	poParams = ""
	putitem/id poParams, "IN_CCUSTO", vInCCusto
	putitem/id poParams, "IN_TRANSACAO", vInTransacao
	putitem/id poParams, "CD_EMPRESA", vCdEmpresaTra
	putitem/id poParams, "IN_VALIDO", vInValido
	
	return(0)
end